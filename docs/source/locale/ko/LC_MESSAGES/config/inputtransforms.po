# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/config/inputtransforms.rst:4
msgid "Custom input transformation"
msgstr ""

#: ../../source/config/inputtransforms.rst:6
msgid ""
"IPython extends Python syntax to allow things like magic commands, and "
"help with the ``?`` syntax. There are several ways to customise how the "
"user's input is processed into Python code to be executed."
msgstr ""

#: ../../source/config/inputtransforms.rst:10
msgid ""
"These hooks are mainly for other projects using IPython as the core of "
"their interactive interface. Using them carelessly can easily break "
"IPython!"
msgstr ""

#: ../../source/config/inputtransforms.rst:14
msgid "String based transformations"
msgstr ""

#: ../../source/config/inputtransforms.rst:18
msgid ""
"When the user enters code, it is first processed as a string. By the end "
"of this stage, it must be valid Python syntax."
msgstr ""

#: ../../source/config/inputtransforms.rst:23
msgid ""
"The API for string and token-based transformations has been completely "
"redesigned. Any third party code extending input transformation will need"
" to be rewritten. The new API is, hopefully, simpler."
msgstr ""

#: ../../source/config/inputtransforms.rst:27
msgid ""
"String based transformations are functions which accept a list of "
"strings: each string is a single line of the input cell, including its "
"line ending. The transformation function should return output in the same"
" structure."
msgstr ""

#: ../../source/config/inputtransforms.rst:31
msgid ""
"These transformations are in two groups, accessible as attributes of the "
":class:`~IPython.core.interactiveshell.InteractiveShell` instance. Each "
"group is a list of transformation functions."
msgstr ""

#: ../../source/config/inputtransforms.rst:35
msgid ""
"``input_transformers_cleanup`` run first on input, to do things like "
"stripping prompts and leading indents from copied code. It may not be "
"possible at this stage to parse the input as valid Python code."
msgstr ""

#: ../../source/config/inputtransforms.rst:38
msgid ""
"Then IPython runs its own transformations to handle its special syntax, "
"like ``%magics`` and ``!system`` commands. This part does not expose "
"extension points."
msgstr ""

#: ../../source/config/inputtransforms.rst:41
msgid ""
"``input_transformers_post`` run as the last step, to do things like "
"converting float literals into decimal objects. These may attempt to "
"parse the input as Python code."
msgstr ""

#: ../../source/config/inputtransforms.rst:45
msgid ""
"These transformers may raise :exc:`SyntaxError` if the input code is "
"invalid, but in most cases it is clearer to pass unrecognised code "
"through unmodified and let Python's own parser decide whether it is "
"valid."
msgstr ""

#: ../../source/config/inputtransforms.rst:49
msgid ""
"For example, imagine we want to obfuscate our code by reversing each "
"line, so we'd write ``)5(f =+ a`` instead of ``a += f(5)``. Here's how we"
" could swap it back the right way before IPython tries to run it::"
msgstr ""

#: ../../source/config/inputtransforms.rst:60
msgid "To start using this::"
msgstr ""

#: ../../source/config/inputtransforms.rst:66
msgid "AST transformations"
msgstr ""

#: ../../source/config/inputtransforms.rst:68
msgid ""
"After the code has been parsed as Python syntax, you can use Python's "
"powerful *Abstract Syntax Tree* tools to modify it. Subclass "
":class:`ast.NodeTransformer`, and add an instance to "
"``shell.ast_transformers``."
msgstr ""

#: ../../source/config/inputtransforms.rst:72
msgid ""
"This example wraps integer literals in an ``Integer`` class, which is "
"useful for mathematical frameworks that want to handle e.g. ``1/3`` as a "
"precise fraction::"
msgstr ""

