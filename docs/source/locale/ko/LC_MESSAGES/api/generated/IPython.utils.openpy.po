# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.utils.openpy.rst:4
msgid "Module: :mod:`utils.openpy`"
msgstr ""

#: IPython.utils.openpy:1 of
msgid ""
"Tools to open .py files as Unicode, using the encoding specified within "
"the file, as per PEP 263."
msgstr ""

#: IPython.utils.openpy:4 of
msgid "Much of the code is taken from the tokenize module in Python 3.2."
msgstr ""

#: ../../source/api/generated/IPython.utils.openpy.rst:10
msgid "8 Functions"
msgstr ""

#: IPython.utils.openpy.detect_encoding:1 of
msgid ""
"The detect_encoding() function is used to detect the encoding that should"
" be used to decode a Python source file.  It requires one argument, "
"readline, in the same way as the tokenize() generator."
msgstr ""

#: IPython.utils.openpy.detect_encoding:5 of
msgid ""
"It will call readline a maximum of twice, and return the encoding used "
"(as a string) and a list of any lines (left as bytes) it has read in."
msgstr ""

#: IPython.utils.openpy.detect_encoding:8 of
msgid ""
"It detects the encoding from the presence of a utf-8 bom or an encoding "
"cookie as specified in pep-0263.  If both a bom and a cookie are present,"
" but disagree, a SyntaxError will be raised.  If the encoding cookie is "
"an invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is "
"found, 'utf-8-sig' is returned."
msgstr ""

#: IPython.utils.openpy.detect_encoding:14 of
msgid "If no encoding is specified, then the default of 'utf-8' will be returned."
msgstr ""

#: IPython.utils.openpy.open:1 of
msgid ""
"Open a file in read only mode using the encoding detected by "
"detect_encoding()."
msgstr ""

#: IPython.utils.openpy.source_to_unicode:1 of
msgid "Converts a bytes string with python source code to unicode."
msgstr ""

#: IPython.utils.openpy.source_to_unicode:3 of
msgid ""
"Unicode strings are passed through unchanged. Byte strings are checked "
"for the python source file encoding cookie to determine encoding. txt can"
" be either a bytes buffer or a string containing the source code."
msgstr ""

#: IPython.utils.openpy.strip_encoding_cookie:1 of
msgid ""
"Generator to pull lines from a text-mode file, skipping the encoding "
"cookie if it is found in the first two lines."
msgstr ""

#: IPython.utils.openpy.read_py_file:1 of
msgid "Read a Python file, using the encoding declared inside the file."
msgstr ""

#: IPython.utils.openpy.read_py_file IPython.utils.openpy.read_py_url of
msgid "Parameters"
msgstr ""

#: IPython.utils.openpy.read_py_file:3 of
msgid "The path to the file to read."
msgstr ""

#: IPython.utils.openpy.read_py_file:5 IPython.utils.openpy.read_py_url:8 of
msgid ""
"If True (the default), and the encoding declaration is found in the first"
" two lines, that line will be excluded from the output - compiling a "
"unicode string with an encoding declaration is a SyntaxError in Python 2."
msgstr ""

#: IPython.utils.openpy.read_py_file IPython.utils.openpy.read_py_url of
msgid "Returns"
msgstr ""

#: IPython.utils.openpy.read_py_file IPython.utils.openpy.read_py_url of
msgid "Return type"
msgstr ""

#: IPython.utils.openpy.read_py_url:1 of
msgid ""
"Read a Python file from a URL, using the encoding declared inside the "
"file."
msgstr ""

#: IPython.utils.openpy.read_py_url:3 of
msgid "The URL from which to fetch the file."
msgstr ""

#: IPython.utils.openpy.read_py_url:5 of
msgid ""
"How to handle decoding errors in the file. Options are the same as for "
"bytes.decode(), but here 'replace' is the default."
msgstr ""

