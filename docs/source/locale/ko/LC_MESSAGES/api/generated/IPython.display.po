# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.display.rst:4
msgid "Module: :mod:`display`"
msgstr ""

#: IPython.display:1 of
msgid "Public API for display tools in IPython."
msgstr ""

#: ../../source/api/generated/IPython.display.rst:10
msgid "20 Classes"
msgstr ""

#: IPython.display.Audio:1 IPython.display.Image:1 IPython.display.JSON:1
#: IPython.display.ProgressBar:1 IPython.display.SVG:1
#: IPython.display.TextDisplayObject:1 of
msgid "Bases: :class:`IPython.core.display.DisplayObject`"
msgstr ""

#: IPython.display.Audio:1 of
msgid "Create an audio object."
msgstr ""

#: IPython.display.Audio:3 of
msgid ""
"When this object is returned by an input cell or passed to the display "
"function, it will result in Audio controls being displayed in the "
"frontend (only works in the notebook)."
msgstr ""

#: IPython.display.Audio IPython.display.Audio.__init__
#: IPython.display.DisplayHandle.display IPython.display.DisplayHandle.update
#: IPython.display.DisplayObject.__init__ IPython.display.FileLink.__init__
#: IPython.display.Image.__init__ IPython.display.Javascript.__init__
#: IPython.display.ProgressBar.__init__ IPython.display.clear_output
#: IPython.display.display IPython.display.display_html
#: IPython.display.display_javascript IPython.display.display_jpeg
#: IPython.display.display_json IPython.display.display_latex
#: IPython.display.display_markdown IPython.display.display_pdf
#: IPython.display.display_png IPython.display.display_pretty
#: IPython.display.display_svg IPython.display.publish_display_data
#: IPython.display.set_matplotlib_close IPython.display.set_matplotlib_formats
#: IPython.display.update_display of
msgid "Parameters"
msgstr ""

#: IPython.display.Audio:7 of
msgid ""
"Can be one of    * Numpy 1d array containing the desired waveform (mono)"
"   * Numpy 2d array containing waveforms for each channel.     "
"Shape=(NCHAN, NSAMPLES). For the standard channel order, see     "
"http://msdn.microsoft.com/en-"
"us/library/windows/hardware/dn653308(v=vs.85).aspx   * List of float or "
"integer representing the waveform (mono)   * String containing the "
"filename   * Bytestring containing raw PCM data or   * URL pointing to a "
"file on the web.  If the array option is used the waveform will be "
"normalized.  If a filename or url is used the format support will be "
"browser dependent."
msgstr ""

#: IPython.display.Audio:8 of
msgid "Can be one of"
msgstr ""

#: IPython.display.Audio:10 of
msgid "Numpy 1d array containing the desired waveform (mono)"
msgstr ""

#: IPython.display.Audio:11 of
msgid ""
"Numpy 2d array containing waveforms for each channel. Shape=(NCHAN, "
"NSAMPLES). For the standard channel order, see http://msdn.microsoft.com"
"/en-us/library/windows/hardware/dn653308(v=vs.85).aspx"
msgstr ""

#: IPython.display.Audio:14 of
msgid "List of float or integer representing the waveform (mono)"
msgstr ""

#: IPython.display.Audio:15 of
msgid "String containing the filename"
msgstr ""

#: IPython.display.Audio:16 of
msgid "Bytestring containing raw PCM data or"
msgstr ""

#: IPython.display.Audio:17 of
msgid "URL pointing to a file on the web."
msgstr ""

#: IPython.display.Audio:19 of
msgid "If the array option is used the waveform will be normalized."
msgstr ""

#: IPython.display.Audio:21 of
msgid "If a filename or url is used the format support will be browser dependent."
msgstr ""

#: IPython.display.Audio:24 IPython.display.Audio.__init__:12
#: IPython.display.DisplayObject.__init__:12
#: IPython.display.Javascript.__init__:14 of
msgid "A URL to download the data from."
msgstr ""

#: IPython.display.Audio:26 IPython.display.Audio.__init__:14
#: IPython.display.DisplayObject.__init__:14
#: IPython.display.Javascript.__init__:16 of
msgid "Path to a local file to load the data from."
msgstr ""

#: IPython.display.Audio:28 of
msgid ""
"Should the audio data be embedded using a data URI (True) or should the "
"original source be referenced. Set this to True if you want the audio to "
"playable later with no internet connection in the notebook.  Default is "
"`True`, unless the keyword argument `url` is set, then default value is "
"`False`."
msgstr ""

#: IPython.display.Audio:28 of
msgid ""
"Should the audio data be embedded using a data URI (True) or should the "
"original source be referenced. Set this to True if you want the audio to "
"playable later with no internet connection in the notebook."
msgstr ""

#: IPython.display.Audio:32 IPython.display.Image.__init__:23 of
msgid ""
"Default is `True`, unless the keyword argument `url` is set, then default"
" value is `False`."
msgstr ""

#: IPython.display.Audio:35 of
msgid ""
"The sampling rate of the raw data. Only required when data parameter is "
"being used as an array"
msgstr ""

#: IPython.display.Audio:38 of
msgid ""
"Set to True if the audio should immediately start playing. Default is "
"`False`."
msgstr ""

#: IPython.display.Audio:43 IPython.display.Image.__init__:45
#: IPython.display.display:42 of
msgid "Examples"
msgstr ""

#: IPython.display.Audio.__init__:1 IPython.display.DisplayObject.__init__:1 of
msgid "Create a display object given raw data."
msgstr ""

#: IPython.display.Audio.__init__:3 IPython.display.DisplayObject.__init__:3 of
msgid ""
"When this object is returned by an expression or passed to the display "
"function, it will result in the data being displayed in the frontend. The"
" MIME type of the data should match the subclasses used, so the Png "
"subclass should be used for 'image/png' data. If the data is a URL, the "
"data will first be downloaded and then displayed. If"
msgstr ""

#: IPython.display.Audio.__init__:10 IPython.display.DisplayObject.__init__:10
#: of
msgid "The raw data or a URL or file to load the data from"
msgstr ""

#: IPython.display.Audio.__init__:16 IPython.display.DisplayObject.__init__:16
#: of
msgid "Dict of metadata associated to be the object when displayed"
msgstr ""

#: IPython.display.Audio.reload:1 IPython.display.DisplayObject.reload:1
#: IPython.display.Image.reload:1 of
msgid "Reload the raw data from file or URL."
msgstr ""

#: IPython.display.DisplayHandle:1 IPython.display.DisplayObject:1
#: IPython.display.FileLink:1 IPython.display.IFrame:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: IPython.display.DisplayHandle:1 of
msgid "A handle on an updatable display"
msgstr ""

#: IPython.display.DisplayHandle:3 of
msgid "Call `.update(obj)` to display a new object."
msgstr ""

#: IPython.display.DisplayHandle:5 of
msgid ""
"Call `.display(obj`) to add a new instance of this display, and update "
"existing instances."
msgstr ""

#: IPython.display.DisplayHandle.__init__:1 IPython.display.IFrame.__init__:1
#: IPython.display.ScribdDocument.__init__:1
#: IPython.display.VimeoVideo.__init__:1
#: IPython.display.YouTubeVideo.__init__:1 of
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr ""

#: IPython.display.DisplayHandle.display:1 of
msgid "Make a new display with my id, updating existing instances."
msgstr ""

#: IPython.display.DisplayHandle.display:3
#: IPython.display.DisplayHandle.update:3 of
msgid "object to display"
msgstr ""

#: IPython.display.DisplayHandle.display:4 of
msgid "additional keyword arguments passed to display"
msgstr ""

#: IPython.display.DisplayHandle.update:1 of
msgid "Update existing displays with my id"
msgstr ""

#: IPython.display.DisplayHandle.update:4 of
msgid "additional keyword arguments passed to update_display"
msgstr ""

#: IPython.display.DisplayObject:1 of
msgid "An object that wraps data to be displayed."
msgstr ""

#: IPython.display.FileLink:1 of
msgid "Class for embedding a local file link in an IPython session, based on path"
msgstr ""

#: IPython.display.FileLink:3 of
msgid ""
"e.g. to embed a link that was generated in the IPython notebook as "
"my/data.txt"
msgstr ""

#: IPython.display.FileLink:5 of
msgid "you would do::"
msgstr ""

#: IPython.display.FileLink:10 IPython.display.FileLinks:9 of
msgid "or in the HTML notebook, just::"
msgstr ""

#: IPython.display.FileLink.__init__:1 of
msgid "path to the file or directory that should be formatted"
msgstr ""

#: IPython.display.FileLink.__init__:3 of
msgid "prefix to be prepended to all files to form a working link [default: '']"
msgstr ""

#: IPython.display.FileLink.__init__:6 of
msgid "text to append to beginning to link [default: '']"
msgstr ""

#: IPython.display.FileLink.__init__:8 of
msgid "text to append at the end of link [default: '<br>']"
msgstr ""

#: IPython.display.FileLinks:1 of
msgid "Bases: :class:`IPython.lib.display.FileLink`"
msgstr ""

#: IPython.display.FileLinks:1 of
msgid "Class for embedding local file links in an IPython session, based on path"
msgstr ""

#: IPython.display.FileLinks:3 of
msgid ""
"e.g. to embed links to files that were generated in the IPython notebook "
"under ``my/data``, you would do::"
msgstr ""

#: IPython.display.FileLinks.__init__:1 of
msgid ""
"See :class:`FileLink` for the ``path``, ``url_prefix``, "
"``result_html_prefix`` and ``result_html_suffix`` parameters."
msgstr ""

#: IPython.display.FileLinks.__init__:6 IPython.display.FileLinks.__init__:25
#: of
msgid "included_suffixes"
msgstr ""

#: IPython.display.FileLinks.__init__:5 IPython.display.FileLinks.__init__:21
#: IPython.display.FileLinks.__init__:24 of
msgid "list"
msgstr ""

#: IPython.display.FileLinks.__init__:5 of
msgid ""
"Filename suffixes to include when formatting output [default: include all"
" files]"
msgstr ""

#: IPython.display.FileLinks.__init__:10 of
msgid "notebook_display_formatter"
msgstr ""

#: IPython.display.FileLinks.__init__:9 IPython.display.FileLinks.__init__:13
#: of
msgid "function"
msgstr ""

#: IPython.display.FileLinks.__init__:9 of
msgid ""
"Used to format links for display in the notebook. See discussion of "
"formatter functions below."
msgstr ""

#: IPython.display.FileLinks.__init__:14 of
msgid "terminal_display_formatter"
msgstr ""

#: IPython.display.FileLinks.__init__:13 of
msgid ""
"Used to format links for display in the terminal. See discussion of "
"formatter functions below."
msgstr ""

#: IPython.display.FileLinks.__init__:16 of
msgid "Formatter functions must be of the form::"
msgstr ""

#: IPython.display.FileLinks.__init__:20 of
msgid "dirname"
msgstr ""

#: IPython.display.FileLinks.__init__:19 of
msgid "str"
msgstr ""

#: IPython.display.FileLinks.__init__:21 of
msgid "The name of a directory"
msgstr ""

#: IPython.display.FileLinks.__init__:22 of
msgid "fnames"
msgstr ""

#: IPython.display.FileLinks.__init__:23 of
msgid "The files in that directory"
msgstr ""

#: IPython.display.FileLinks.__init__:25 of
msgid ""
"The file suffixes that should be included in the output (passing None "
"meansto include all suffixes in the output in the built-in formatters)"
msgstr ""

#: IPython.display.FileLinks.__init__:28 of
msgid "recursive"
msgstr ""

#: IPython.display.FileLinks.__init__:27 of
msgid "boolean"
msgstr ""

#: IPython.display.FileLinks.__init__:28 of
msgid "Whether to recurse into subdirectories. Default is True."
msgstr ""

#: IPython.display.FileLinks.__init__:30 of
msgid ""
"The function should return a list of lines that will be printed in the "
"notebook (if passing notebook_display_formatter) or the terminal (if "
"passing terminal_display_formatter). This function is iterated over for "
"each directory in self.path. Default formatters are in place, can be "
"passed here to support alternative formatting."
msgstr ""

#: IPython.display.HTML:1 IPython.display.Javascript:1 IPython.display.Latex:1
#: IPython.display.Markdown:1 IPython.display.Math:1 IPython.display.Pretty:1
#: of
msgid "Bases: :class:`IPython.core.display.TextDisplayObject`"
msgstr ""

#: IPython.display.IFrame:1 of
msgid "Generic class to embed an iframe in an IPython notebook"
msgstr ""

#: IPython.display.Image.__init__:1 of
msgid "Create a PNG/JPEG/GIF image object given raw data."
msgstr ""

#: IPython.display.Image.__init__:3 of
msgid ""
"When this object is returned by an input cell or passed to the display "
"function, it will result in the image being displayed in the frontend."
msgstr ""

#: IPython.display.Image.__init__:7 of
msgid ""
"The raw image data or a URL or filename to load the data from. This "
"always results in embedded image data."
msgstr ""

#: IPython.display.Image.__init__:10 of
msgid ""
"A URL to download the data from. If you specify `url=`, the image data "
"will not be embedded unless you also specify `embed=True`."
msgstr ""

#: IPython.display.Image.__init__:13 of
msgid ""
"Path to a local file to load the data from. Images from a file are always"
" embedded."
msgstr ""

#: IPython.display.Image.__init__:16 of
msgid ""
"The format of the image data (png/jpeg/jpg/gif). If a filename or URL is "
"given for format will be inferred from the filename extension."
msgstr ""

#: IPython.display.Image.__init__:19 of
msgid ""
"Should the image data be embedded using a data URI (True) or be loaded "
"using an <img> tag. Set this to True if you want the image to be viewable"
" later with no internet connection in the notebook.  Default is `True`, "
"unless the keyword argument `url` is set, then default value is `False`."
"  Note that QtConsole is not able to display images if `embed` is set to "
"`False`"
msgstr ""

#: IPython.display.Image.__init__:19 of
msgid ""
"Should the image data be embedded using a data URI (True) or be loaded "
"using an <img> tag. Set this to True if you want the image to be viewable"
" later with no internet connection in the notebook."
msgstr ""

#: IPython.display.Image.__init__:26 of
msgid ""
"Note that QtConsole is not able to display images if `embed` is set to "
"`False`"
msgstr ""

#: IPython.display.Image.__init__:28 of
msgid "Width in pixels to which to constrain the image in html"
msgstr ""

#: IPython.display.Image.__init__:30 of
msgid "Height in pixels to which to constrain the image in html"
msgstr ""

#: IPython.display.Image.__init__:32 of
msgid ""
"Automatically set the width and height to half of the measured width and "
"height. This only works for embedded images because it reads the "
"width/height from image data. For non-embedded images, you can just set "
"the desired display width and height directly."
msgstr ""

#: IPython.display.Image.__init__:39 of
msgid "Set unconfined=True to disable max-width confinement of the image."
msgstr ""

#: IPython.display.Image.__init__:41 of
msgid "Specify extra metadata to attach to the image."
msgstr ""

#: IPython.display.Image.__init__:46 of
msgid ""
"# embedded image data, works in qtconsole and notebook # when passed "
"positionally, the first arg can be any of raw image data, # a URL, or a "
"filename from which to load image data. # The result is always embedding "
"image data for inline images. "
"Image('http://www.google.fr/images/srpr/logo3w.png') "
"Image('/path/to/image.jpg') Image(b'RAW_PNG_DATA...')"
msgstr ""

#: IPython.display.Image.__init__:54 of
msgid ""
"# Specifying Image(url=...) does not embed the image data, # it only "
"generates `<img>` tag with a link to the source. # This will not work in "
"the qtconsole or offline. "
"Image(url='http://www.google.fr/images/srpr/logo3w.png')"
msgstr ""

#: IPython.display.JSON:1 of
msgid "JSON expects a JSON-able dict or list"
msgstr ""

#: IPython.display.JSON:3 of
msgid "not an already-serialized JSON string."
msgstr ""

#: IPython.display.JSON:5 of
msgid ""
"Scalar types (None, number, string) are not allowed, only dict or list "
"containers."
msgstr ""

#: IPython.display.Javascript.__init__:1 of
msgid "Create a Javascript display object given raw data."
msgstr ""

#: IPython.display.Javascript.__init__:3 of
msgid ""
"When this object is returned by an expression or passed to the display "
"function, it will result in the data being displayed in the frontend. If "
"the data is a URL, the data will first be downloaded and then displayed."
msgstr ""

#: IPython.display.Javascript.__init__:8 of
msgid ""
"In the Notebook, the containing element will be available as `element`, "
"and jQuery will be available.  Content appended to `element` will be "
"visible in the output area."
msgstr ""

#: IPython.display.Javascript.__init__:12 of
msgid "The Javascript source code or a URL to download it from."
msgstr ""

#: IPython.display.Javascript.__init__:18 of
msgid ""
"A sequence of Javascript library URLs to load asynchronously before "
"running the source code. The full URLs of the libraries should be given. "
"A single Javascript library URL can also be given as a string."
msgstr ""

#: IPython.display.Javascript.__init__:23 of
msgid ""
"A sequence of css files to load before running the source code. The full "
"URLs of the css files should be given. A single css URL can also be given"
" as a string."
msgstr ""

#: IPython.display.ProgressBar:1 of
msgid "Progressbar supports displaying a progressbar like element"
msgstr ""

#: IPython.display.ProgressBar.__init__:1 of
msgid "Creates a new progressbar"
msgstr ""

#: IPython.display.ProgressBar.__init__:3 of
msgid "maximum size of the progressbar"
msgstr ""

#: IPython.display.ScribdDocument:1 IPython.display.VimeoVideo:1
#: IPython.display.YouTubeVideo:1 of
msgid "Bases: :class:`IPython.lib.display.IFrame`"
msgstr ""

#: IPython.display.ScribdDocument:1 of
msgid "Class for embedding a Scribd document in an IPython session"
msgstr ""

#: IPython.display.ScribdDocument:3 of
msgid ""
"Use the start_page params to specify a starting point in the document Use"
" the view_mode params to specify display type one off scroll | slideshow "
"| book"
msgstr ""

#: IPython.display.ScribdDocument:6 of
msgid ""
"e.g to Display Wes' foundational paper about PANDAS in book mode from "
"page 3"
msgstr ""

#: IPython.display.ScribdDocument:8 of
msgid ""
"ScribdDocument(71048089, width=800, height=400, start_page=3, "
"view_mode=\"book\")"
msgstr ""

#: IPython.display.TextDisplayObject:1 of
msgid "Validate that display data is text"
msgstr ""

#: IPython.display.VimeoVideo:1 of
msgid ""
"Class for embedding a Vimeo video in an IPython session, based on its "
"video id."
msgstr ""

#: IPython.display.YouTubeVideo:1 of
msgid ""
"Class for embedding a YouTube Video in an IPython session, based on its "
"video id."
msgstr ""

#: IPython.display.YouTubeVideo:3 of
msgid ""
"e.g. to embed the video from https://www.youtube.com/watch?v=foo , you "
"would do::"
msgstr ""

#: IPython.display.YouTubeVideo:9 of
msgid "To start from 30 seconds::"
msgstr ""

#: IPython.display.YouTubeVideo:14 of
msgid ""
"To calculate seconds from time as hours, minutes, seconds use "
":class:`datetime.timedelta`::"
msgstr ""

#: IPython.display.YouTubeVideo:19 of
msgid ""
"Other parameters can be provided as documented at "
"https://developers.google.com/youtube/player_parameters#Parameters"
msgstr ""

#: IPython.display.YouTubeVideo:22 of
msgid ""
"When converting the notebook using nbconvert, a jpeg representation of "
"the video will be inserted in the document."
msgstr ""

#: ../../source/api/generated/IPython.display.rst:117
msgid "16 Functions"
msgstr ""

#: IPython.display.clear_output:1 of
msgid "Clear the output of the current cell receiving output."
msgstr ""

#: IPython.display.clear_output:3 of
msgid "Wait to clear the output until new output is available to replace it."
msgstr ""

#: IPython.display.display:1 of
msgid "Display a Python object in all frontends."
msgstr ""

#: IPython.display.display:3 of
msgid ""
"By default all representations will be computed and sent to the "
"frontends. Frontends can decide which representation is used and how."
msgstr ""

#: IPython.display.display:6 of
msgid ""
"In terminal IPython this will be similar to using :func:`print`, for use "
"in richer frontends see Jupyter notebook examples with rich display "
"logic."
msgstr ""

#: IPython.display.display:9 of
msgid "The Python objects to display."
msgstr ""

#: IPython.display.display:11 of
msgid ""
"Are the objects to be displayed already mimetype-keyed dicts of raw "
"display data, or Python objects that need to be formatted before display?"
" [default: False]"
msgstr ""

#: IPython.display.display:14 of
msgid ""
"A list of format type strings (MIME types) to include in the format data "
"dict. If this is set *only* the format types included in this list will "
"be computed."
msgstr ""

#: IPython.display.display:18 of
msgid ""
"A list of format type strings (MIME types) to exclude in the format data "
"dict. If this is set all format types will be computed, except for those "
"included in this argument."
msgstr ""

#: IPython.display.display:22 of
msgid ""
"A dictionary of metadata to associate with the output. mime-type keys in "
"this dictionary will be associated with the individual representation "
"formats, if they exist."
msgstr ""

#: IPython.display.display:26 of
msgid ""
"A dictionary of transient data to associate with the output. Data in this"
" dict should not be persisted to files (e.g. notebooks)."
msgstr ""

#: IPython.display.display:29 of
msgid ""
"Set an id for the display. This id can be used for updating this display "
"area later via update_display. If given as `True`, generate a new "
"`display_id`"
msgstr ""

#: IPython.display.display:33 of
msgid "Additional keyword-arguments are passed through to the display publisher."
msgstr ""

#: IPython.display.display of
msgid "Returns"
msgstr ""

#: IPython.display.display:36 of
msgid ""
"**handle** -- Returns a handle on updatable displays for use with "
":func:`update_display`, if `display_id` is given. Returns :any:`None` if "
"no `display_id` is given (default)."
msgstr ""

#: IPython.display.display of
msgid "Return type"
msgstr ""

#: IPython.display.display:79 of
msgid ":func:`update_display`"
msgstr ""

#: IPython.display.display:82 of
msgid "Notes"
msgstr ""

#: IPython.display.display:83 of
msgid ""
"In Python, objects can declare their textual representation using the "
"`__repr__` method. IPython expands on this idea and allows objects to "
"declare other, rich representations including:"
msgstr ""

#: IPython.display.display:87 of
msgid "HTML"
msgstr ""

#: IPython.display.display:88 of
msgid "JSON"
msgstr ""

#: IPython.display.display:89 of
msgid "PNG"
msgstr ""

#: IPython.display.display:90 of
msgid "JPEG"
msgstr ""

#: IPython.display.display:91 of
msgid "SVG"
msgstr ""

#: IPython.display.display:92 of
msgid "LaTeX"
msgstr ""

#: IPython.display.display:94 of
msgid ""
"A single object can declare some or all of these representations; all are"
" handled by IPython's display system."
msgstr ""

#: IPython.display.display:97 of
msgid ""
"The main idea of the first approach is that you have to implement special"
" display methods when you define your class, one for each representation "
"you want to use. Here is a list of the names of the special methods and "
"the values they must return:"
msgstr ""

#: IPython.display.display:102 of
msgid "`_repr_html_`: return raw HTML as a string, or a tuple (see below)."
msgstr ""

#: IPython.display.display:103 of
msgid "`_repr_json_`: return a JSONable dict, or a tuple (see below)."
msgstr ""

#: IPython.display.display:104 of
msgid "`_repr_jpeg_`: return raw JPEG data, or a tuple (see below)."
msgstr ""

#: IPython.display.display:105 of
msgid "`_repr_png_`: return raw PNG data, or a tuple (see below)."
msgstr ""

#: IPython.display.display:106 of
msgid "`_repr_svg_`: return raw SVG data as a string, or a tuple (see below)."
msgstr ""

#: IPython.display.display:107 of
msgid "`_repr_latex_`: return LaTeX commands in a string surrounded by \"$\","
msgstr ""

#: IPython.display.display:108 of
msgid "or a tuple (see below)."
msgstr ""

#: IPython.display.display:111 of
msgid "`_repr_mimebundle_`: return a full mimebundle containing the mapping"
msgstr ""

#: IPython.display.display:110 of
msgid "from all mimetypes to data. Use this for any mime-type not listed above."
msgstr ""

#: IPython.display.display:113 of
msgid ""
"The above functions may also return the object's metadata alonside the "
"data.  If the metadata is available, the functions will return a tuple "
"containing the data and metadata, in that order.  If there is no metadata"
" available, then the functions will return the data only."
msgstr ""

#: IPython.display.display:118 of
msgid ""
"When you are directly writing your own classes, you can adapt them for "
"display in IPython by following the above approach. But in practice, you "
"often need to work with existing classes that you can't easily modify."
msgstr ""

#: IPython.display.display:122 of
msgid ""
"You can refer to the documentation on integrating with the display system"
" in order to register custom formatters for already existing types "
"(:ref:`integrating_rich_display`)."
msgstr ""

#: IPython.display.display:126 IPython.display.display:127 of
msgid "display available without import"
msgstr ""

#: IPython.display.display:129 of
msgid ""
"Since IPython 5.4 and 6.1 :func:`display` is automatically made available"
" to the user without import. If you are using display in a document that "
"might be used in a pure python context or with older version of IPython, "
"use the following import at the top of your file::"
msgstr ""

#: IPython.display.display_html:1 of
msgid "Display the HTML representation of an object."
msgstr ""

#: IPython.display.display_html:3 of
msgid ""
"Note: If raw=False and the object does not have a HTML representation, no"
" HTML will be shown."
msgstr ""

#: IPython.display.display_html:6 of
msgid "The Python objects to display, or if raw=True raw HTML data to display."
msgstr ""

#: IPython.display.display_html:9 IPython.display.display_javascript:6
#: IPython.display.display_jpeg:6 IPython.display.display_json:8
#: IPython.display.display_latex:6 IPython.display.display_markdown:6
#: IPython.display.display_pdf:6 IPython.display.display_png:6
#: IPython.display.display_pretty:6 IPython.display.display_svg:6 of
msgid ""
"Are the data objects raw data or Python objects that need to be formatted"
" before display? [default: False]"
msgstr ""

#: IPython.display.display_html:12 IPython.display.display_javascript:9
#: IPython.display.display_jpeg:9 IPython.display.display_json:11
#: IPython.display.display_latex:9 IPython.display.display_markdown:9
#: IPython.display.display_pdf:9 IPython.display.display_png:9
#: IPython.display.display_pretty:9 IPython.display.display_svg:9 of
msgid "Metadata to be associated with the specific mimetype output."
msgstr ""

#: IPython.display.display_javascript:1 of
msgid "Display the Javascript representation of an object."
msgstr ""

#: IPython.display.display_javascript:3 IPython.display.display_pdf:3 of
msgid ""
"The Python objects to display, or if raw=True raw javascript data to "
"display."
msgstr ""

#: IPython.display.display_jpeg:1 of
msgid "Display the JPEG representation of an object."
msgstr ""

#: IPython.display.display_jpeg:3 of
msgid "The Python objects to display, or if raw=True raw JPEG data to display."
msgstr ""

#: IPython.display.display_json:1 of
msgid "Display the JSON representation of an object."
msgstr ""

#: IPython.display.display_json:3 of
msgid "Note that not many frontends support displaying JSON."
msgstr ""

#: IPython.display.display_json:5 of
msgid "The Python objects to display, or if raw=True raw json data to display."
msgstr ""

#: IPython.display.display_latex:1 of
msgid "Display the LaTeX representation of an object."
msgstr ""

#: IPython.display.display_latex:3 of
msgid "The Python objects to display, or if raw=True raw latex data to display."
msgstr ""

#: IPython.display.display_markdown:1 of
msgid "Displays the Markdown representation of an object."
msgstr ""

#: IPython.display.display_markdown:3 of
msgid ""
"The Python objects to display, or if raw=True raw markdown data to "
"display."
msgstr ""

#: IPython.display.display_pdf:1 of
msgid "Display the PDF representation of an object."
msgstr ""

#: IPython.display.display_png:1 of
msgid "Display the PNG representation of an object."
msgstr ""

#: IPython.display.display_png:3 of
msgid "The Python objects to display, or if raw=True raw png data to display."
msgstr ""

#: IPython.display.display_pretty:1 of
msgid "Display the pretty (default) representation of an object."
msgstr ""

#: IPython.display.display_pretty:3 of
msgid "The Python objects to display, or if raw=True raw text data to display."
msgstr ""

#: IPython.display.display_svg:1 of
msgid "Display the SVG representation of an object."
msgstr ""

#: IPython.display.display_svg:3 of
msgid "The Python objects to display, or if raw=True raw svg data to display."
msgstr ""

#: IPython.display.publish_display_data:1 of
msgid "Publish data and metadata to all frontends."
msgstr ""

#: IPython.display.publish_display_data:3 of
msgid ""
"See the ``display_data`` message in the messaging documentation for more "
"details about this message type."
msgstr ""

#: IPython.display.publish_display_data:6 of
msgid "Keys of data and metadata can be any mime-type."
msgstr ""

#: IPython.display.publish_display_data:8 of
msgid ""
"A dictionary having keys that are valid MIME types (like 'text/plain' or "
"'image/svg+xml') and values that are the data for that MIME type. The "
"data itself must be a JSON'able data structure. Minimally all data should"
" have the 'text/plain' data, which can be displayed by all frontends. If "
"more than the plain text is given, it is up to the frontend to decide "
"which representation to use."
msgstr ""

#: IPython.display.publish_display_data:16 of
msgid ""
"A dictionary for metadata related to the data. This can contain arbitrary"
" key, value pairs that frontends can use to interpret the data. mime-type"
" keys matching those in data can be used to specify metadata about "
"particular representations."
msgstr ""

#: IPython.display.publish_display_data:21 of
msgid "Unused."
msgstr ""

#: IPython.display.publish_display_data:23 of
msgid "A dictionary of transient data, such as display_id."
msgstr ""

#: IPython.display.set_matplotlib_close:1 of
msgid "Set whether the inline backend closes all figures automatically or not."
msgstr ""

#: IPython.display.set_matplotlib_close:3 of
msgid ""
"By default, the inline backend used in the IPython Notebook will close "
"all matplotlib figures automatically after each cell is run. This means "
"that plots in different cells won't interfere. Sometimes, you may want to"
" make a plot in one cell and then refine it in later cells. This can be "
"accomplished by::"
msgstr ""

#: IPython.display.set_matplotlib_close:11
#: IPython.display.set_matplotlib_formats:7 of
msgid "To set this in your config files use the following::"
msgstr ""

#: IPython.display.set_matplotlib_close:15 of
msgid ""
"Should all matplotlib figures be automatically closed after each cell is "
"run?"
msgstr ""

#: IPython.display.set_matplotlib_formats:1 of
msgid ""
"Select figure formats for the inline backend. Optionally pass quality for"
" JPEG."
msgstr ""

#: IPython.display.set_matplotlib_formats:3 of
msgid "For example, this enables PNG and JPEG output with a JPEG quality of 90%::"
msgstr ""

#: IPython.display.set_matplotlib_formats:12 of
msgid ""
"One or more figure formats to enable: 'png', 'retina', 'jpeg', 'svg', "
"'pdf'."
msgstr ""

#: IPython.display.set_matplotlib_formats:14 of
msgid "Keyword args will be relayed to ``figure.canvas.print_figure``."
msgstr ""

#: IPython.display.update_display:1 of
msgid "Update an existing display by id"
msgstr ""

#: IPython.display.update_display:3 of
msgid "The object with which to update the display"
msgstr ""

#: IPython.display.update_display:4 of
msgid "The id of the display to update"
msgstr ""

#: IPython.display.update_display:7 of
msgid ":func:`display`"
msgstr ""

