# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.utils.capture.rst:4
msgid "Module: :mod:`utils.capture`"
msgstr ""

#: IPython.utils.capture:1 of
msgid "IO capturing utilities."
msgstr ""

#: ../../source/api/generated/IPython.utils.capture.rst:10
msgid "3 Classes"
msgstr ""

#: IPython.utils.capture.CapturedIO:1 IPython.utils.capture.RichOutput:1
#: IPython.utils.capture.capture_output:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: IPython.utils.capture.CapturedIO.__init__:1
#: IPython.utils.capture.RichOutput.__init__:1
#: IPython.utils.capture.capture_output.__init__:1 of
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr ""

#: IPython.utils.capture.CapturedIO:1 of
msgid ""
"Simple object for containing captured stdout/err and rich display "
"StringIO objects"
msgstr ""

#: IPython.utils.capture.CapturedIO:3 of
msgid "Each instance `c` has three attributes:"
msgstr ""

#: IPython.utils.capture.CapturedIO:5 of
msgid "``c.stdout`` : standard output as a string"
msgstr ""

#: IPython.utils.capture.CapturedIO:6 of
msgid "``c.stderr`` : standard error as a string"
msgstr ""

#: IPython.utils.capture.CapturedIO:7 of
msgid "``c.outputs``: a list of rich display outputs"
msgstr ""

#: IPython.utils.capture.CapturedIO:9 of
msgid ""
"Additionally, there's a ``c.show()`` method which will print all of the "
"above in the same order, and can be invoked simply via ``c()``."
msgstr ""

#: IPython.utils.capture.CapturedIO.outputs:1 of
msgid "A list of the captured rich display outputs, if any."
msgstr ""

#: IPython.utils.capture.CapturedIO.outputs:3 of
msgid ""
"If you have a CapturedIO object ``c``, these can be displayed in IPython "
"using::"
msgstr ""

#: IPython.utils.capture.CapturedIO.show:1 of
msgid "write my output to sys.stdout/err as appropriate"
msgstr ""

#: IPython.utils.capture.CapturedIO.stderr:1 of
msgid "Captured standard error"
msgstr ""

#: IPython.utils.capture.CapturedIO.stdout:1 of
msgid "Captured standard output"
msgstr ""

#: IPython.utils.capture.capture_output:1 of
msgid "context manager for capturing stdout/err"
msgstr ""

