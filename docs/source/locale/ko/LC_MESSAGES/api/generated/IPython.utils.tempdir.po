# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.utils.tempdir.rst:4
msgid "Module: :mod:`utils.tempdir`"
msgstr ""

#: IPython.utils.tempdir:1 of
msgid ""
"This module contains classes - NamedFileInTemporaryDirectory, "
"TemporaryWorkingDirectory."
msgstr ""

#: IPython.utils.tempdir:3 of
msgid ""
"These classes add extra features such as creating a named file in "
"temporary directory and creating a context manager for the working "
"directory which is also temporary."
msgstr ""

#: ../../source/api/generated/IPython.utils.tempdir.rst:10
msgid "3 Classes"
msgstr ""

#: IPython.utils.tempdir.NamedFileInTemporaryDirectory:1
#: IPython.utils.tempdir.TemporaryDirectory:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: IPython.utils.tempdir.TemporaryDirectory:1 of
msgid ""
"Create and return a temporary directory.  This has the same behavior as "
"mkdtemp but can be used as a context manager.  For .. rubric:: Example"
msgstr ""

#: IPython.utils.tempdir.TemporaryDirectory:6 of
msgid "with TemporaryDirectory() as tmpdir:"
msgstr ""

#: IPython.utils.tempdir.TemporaryDirectory:6
#: IPython.utils.tempdir.TemporaryWorkingDirectory:6 of
msgid "..."
msgstr ""

#: IPython.utils.tempdir.TemporaryDirectory:8 of
msgid ""
"Upon exiting the context, the directory and everything contained in it "
"are removed."
msgstr ""

#: IPython.utils.tempdir.TemporaryDirectory.__init__:1 of
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr ""

#: IPython.utils.tempdir.NamedFileInTemporaryDirectory.__init__:1 of
msgid "Open a file named `filename` in a temporary directory."
msgstr ""

#: IPython.utils.tempdir.NamedFileInTemporaryDirectory.__init__:3 of
msgid ""
"This context manager is preferred over `NamedTemporaryFile` in stdlib "
"`tempfile` when one needs to reopen the file."
msgstr ""

#: IPython.utils.tempdir.NamedFileInTemporaryDirectory.__init__:6 of
msgid ""
"Arguments `mode` and `bufsize` are passed to `open`. Rest of the "
"arguments are passed to `TemporaryDirectory`."
msgstr ""

#: IPython.utils.tempdir.TemporaryWorkingDirectory:1 of
msgid "Bases: :class:`tempfile.TemporaryDirectory`"
msgstr ""

#: IPython.utils.tempdir.TemporaryWorkingDirectory:1 of
msgid ""
"Creates a temporary directory and sets the cwd to that directory. "
"Automatically reverts to previous cwd upon cleanup. Usage example:"
msgstr ""

#: IPython.utils.tempdir.TemporaryWorkingDirectory:5 of
msgid "with TemporaryWorkingDirectory() as tmpdir:"
msgstr ""

