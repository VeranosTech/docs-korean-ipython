# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.core.inputsplitter.rst:4
msgid "Module: :mod:`core.inputsplitter`"
msgstr ""

#: IPython.core.inputsplitter:1 of
msgid "DEPRECATED: Input handling and transformation machinery."
msgstr ""

#: IPython.core.inputsplitter:3 of
msgid "This module was deprecated in IPython 7.0, in favour of inputtransformer2."
msgstr ""

#: IPython.core.inputsplitter:5 of
msgid ""
"The first class in this module, :class:`InputSplitter`, is designed to "
"tell when input from a line-oriented frontend is complete and should be "
"executed, and when the user should be prompted for another line of code "
"instead. The name 'input splitter' is largely for historical reasons."
msgstr ""

#: IPython.core.inputsplitter:10 of
msgid ""
"A companion, :class:`IPythonInputSplitter`, provides the same "
"functionality but with full support for the extended IPython syntax "
"(magics, system calls, etc). The code to actually do these "
"transformations is in :mod:`IPython.core.inputtransformer`. "
":class:`IPythonInputSplitter` feeds the raw code to the transformers in "
"order and stores the results."
msgstr ""

#: IPython.core.inputsplitter:16 of
msgid "For more details, see the class docstrings below."
msgstr ""

#: ../../source/api/generated/IPython.core.inputsplitter.rst:10
msgid "2 Classes"
msgstr ""

#: IPython.core.inputsplitter.InputSplitter:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: IPython.core.inputsplitter.InputSplitter:1 of
msgid "An object that can accumulate lines of Python source before execution."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter:3 of
msgid ""
"This object is designed to be fed python source line-by-line, using "
":meth:`push`. It will return on each push whether the currently pushed "
"code could be executed already. In addition, it provides a method called "
":meth:`push_accepts_more` that can be used to query whether more input "
"can be pushed into a single interactive block."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter:9 of
msgid ""
"This is a simple example of how an interactive terminal-based client can "
"use this tool::"
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.__init__:1
#: IPython.core.inputsplitter.InputSplitter.__init__:1 of
msgid "Create a new InputSplitter instance."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.check_complete:1 of
msgid "Return whether a block of code is ready to execute, or should be continued"
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.check_complete:3 of
msgid ""
"This is a non-stateful API, and will reset the state of this "
"InputSplitter."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push
#: IPython.core.inputsplitter.InputSplitter.check_complete
#: IPython.core.inputsplitter.InputSplitter.push
#: IPython.core.inputsplitter.last_blank
#: IPython.core.inputsplitter.last_two_blanks
#: IPython.core.inputsplitter.num_ini_spaces
#: IPython.core.inputsplitter.remove_comments of
msgid "Parameters"
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.check_complete:5 of
msgid "Python input code, which can be multiline."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push
#: IPython.core.inputsplitter.InputSplitter.check_complete
#: IPython.core.inputsplitter.InputSplitter.push
#: IPython.core.inputsplitter.num_ini_spaces
#: IPython.core.inputsplitter.remove_comments of
msgid "Returns"
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.check_complete:8 of
msgid ""
"* **status** (*str*) -- One of 'complete', 'incomplete', or 'invalid' if "
"source is not a   prefix of valid code. * **indent_spaces** (*int or "
"None*) -- The number of spaces by which to indent the next line of code. "
"If   status is not 'incomplete', this is None."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.check_complete:8 of
msgid ""
"**status** (*str*) -- One of 'complete', 'incomplete', or 'invalid' if "
"source is not a prefix of valid code."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.check_complete:10 of
msgid ""
"**indent_spaces** (*int or None*) -- The number of spaces by which to "
"indent the next line of code. If status is not 'incomplete', this is "
"None."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.push:1 of
msgid "Push one or more lines of input."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.push:3 of
msgid ""
"This stores the given lines and returns a status code indicating whether "
"the code forms a complete Python block or not."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push:7
#: IPython.core.inputsplitter.InputSplitter.push:6 of
msgid ""
"Any exceptions generated in compilation are swallowed, but if an "
"exception was produced, the method returns True."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push:10
#: IPython.core.inputsplitter.InputSplitter.push:9 of
msgid "One or more lines of Python input."
msgstr ""

#: IPython.core.inputsplitter.InputSplitter.push:12 of
msgid ""
"**is_complete** -- True if the current input source (the result of the "
"current input plus prior inputs) forms a complete Python execution block."
"  Note that this value is also stored as a private attribute "
"(``_is_complete``), so it can be queried at any time."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push
#: IPython.core.inputsplitter.InputSplitter.push
#: IPython.core.inputsplitter.num_ini_spaces
#: IPython.core.inputsplitter.remove_comments of
msgid "Return type"
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push_accepts_more:1
#: IPython.core.inputsplitter.InputSplitter.push_accepts_more:1 of
msgid "Return whether a block of interactive input can accept more input."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push_accepts_more:3
#: IPython.core.inputsplitter.InputSplitter.push_accepts_more:3 of
msgid ""
"This method is meant to be used by line-oriented frontends, who need to "
"guess whether a block is complete or not based solely on prior and "
"current input lines.  The InputSplitter considers it has a complete "
"interactive block and will not accept more input when either:"
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push_accepts_more:8
#: IPython.core.inputsplitter.InputSplitter.push_accepts_more:8 of
msgid "A SyntaxError is raised"
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push_accepts_more:10
#: IPython.core.inputsplitter.InputSplitter.push_accepts_more:10 of
msgid ""
"The code is complete and consists of a single line or a single non-"
"compound statement"
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push_accepts_more:13
#: IPython.core.inputsplitter.InputSplitter.push_accepts_more:13 of
msgid "The code is complete and has a blank line at the end"
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push_accepts_more:15
#: IPython.core.inputsplitter.InputSplitter.push_accepts_more:15 of
msgid ""
"If the current input produces a syntax error, this method immediately "
"returns False but does *not* raise the syntax error exception, as "
"typically clients will want to send invalid syntax to an execution "
"backend which might convert the invalid syntax into valid Python via one "
"of the dynamic IPython mechanisms."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.reset:1
#: IPython.core.inputsplitter.InputSplitter.reset:1 of
msgid "Reset the input buffer and associated state."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.source_reset:1
#: IPython.core.inputsplitter.InputSplitter.source_reset:1 of
msgid "Return the input source and perform a full reset."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter:1 of
msgid "Bases: :class:`IPython.core.inputsplitter.InputSplitter`"
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter:1 of
msgid "An input splitter that recognizes all of IPython's special syntax."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push:1 of
msgid "Push one or more lines of IPython input."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push:3 of
msgid ""
"This stores the given lines and returns a status code indicating whether "
"the code forms a complete Python block or not, after processing all input"
" lines for special IPython syntax."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.push:13 of
msgid ""
"**is_complete** -- True if the current input source (the result of the "
"current input plus prior inputs) forms a complete Python execution block."
"  Note that this value is also stored as a private attribute "
"(_is_complete), so it can be queried at any time."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.raw_reset:1 of
msgid "Return raw input only and perform a full reset."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.transform_cell:1 of
msgid "Process and translate a cell of input."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.transforms:1 of
msgid "Quick access to all transformers."
msgstr ""

#: IPython.core.inputsplitter.IPythonInputSplitter.transforms_in_use:1 of
msgid ""
"Transformers, excluding logical line transformers if we're in a Python "
"line."
msgstr ""

#: ../../source/api/generated/IPython.core.inputsplitter.rst:25
msgid "5 Functions"
msgstr ""

#: IPython.core.inputsplitter.num_ini_spaces:1 of
msgid "Return the number of initial spaces in a string."
msgstr ""

#: IPython.core.inputsplitter.num_ini_spaces:3 of
msgid ""
"Note that tabs are counted as a single space.  For now, we do *not* "
"support mixing of tabs and spaces in the user's input."
msgstr ""

#: IPython.core.inputsplitter.num_ini_spaces:9 of
msgid "**n**"
msgstr ""

#: IPython.core.inputsplitter.last_blank:1 of
msgid "Determine if the input source ends in a blank."
msgstr ""

#: IPython.core.inputsplitter.last_blank:3
#: IPython.core.inputsplitter.last_two_blanks:3 of
msgid "A blank is either a newline or a line consisting of whitespace."
msgstr ""

#: IPython.core.inputsplitter.last_blank:5
#: IPython.core.inputsplitter.last_two_blanks:5 of
msgid "A single or multiline string."
msgstr ""

#: IPython.core.inputsplitter.last_two_blanks:1 of
msgid "Determine if the input source ends in two blanks."
msgstr ""

#: IPython.core.inputsplitter.remove_comments:1 of
msgid "Remove all comments from input source."
msgstr ""

#: IPython.core.inputsplitter.remove_comments:3 of
msgid "Note: comments are NOT recognized inside of strings!"
msgstr ""

#: IPython.core.inputsplitter.remove_comments:5 of
msgid "A single or multiline input string."
msgstr ""

#: IPython.core.inputsplitter.get_input_encoding:1 of
msgid "Return the default standard input encoding."
msgstr ""

#: IPython.core.inputsplitter.get_input_encoding:3 of
msgid "If sys.stdin has no encoding, 'ascii' is returned."
msgstr ""

