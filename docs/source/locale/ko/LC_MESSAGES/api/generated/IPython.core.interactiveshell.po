# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.core.interactiveshell.rst:4
msgid "Module: :mod:`core.interactiveshell`"
msgstr ""

#: IPython.core.interactiveshell:1 of
msgid "Main IPython class."
msgstr ""

#: ../../source/api/generated/IPython.core.interactiveshell.rst:10
msgid "6 Classes"
msgstr ""

#: IPython.core.interactiveshell.ProvisionalWarning:1 of
msgid "Bases: :class:`DeprecationWarning`"
msgstr ""

#: IPython.core.interactiveshell.ProvisionalWarning:1 of
msgid "Warning class for unstable features"
msgstr ""

#: IPython.core.interactiveshell.SpaceInInput:1 of
msgid "Bases: :class:`Exception`"
msgstr ""

#: IPython.core.interactiveshell.SeparateUnicode:1 of
msgid "Bases: :class:`traitlets.traitlets.Unicode`"
msgstr ""

#: IPython.core.interactiveshell.SeparateUnicode:1 of
msgid "A Unicode subclass to validate separate_in, separate_out, etc."
msgstr ""

#: IPython.core.interactiveshell.SeparateUnicode:3 of
msgid ""
"This is a Unicode based trait that converts '0'->'' and "
"``'\\\\n'->'\\n'``."
msgstr ""

#: IPython.core.interactiveshell.ExecutionResult:1
#: IPython.core.interactiveshell.InteractiveShellABC:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: IPython.core.interactiveshell.ExecutionResult:1 of
msgid "The result of a call to :meth:`InteractiveShell.run_cell`"
msgstr ""

#: IPython.core.interactiveshell.ExecutionResult:3 of
msgid "Stores information about what took place."
msgstr ""

#: IPython.core.interactiveshell.ExecutionResult.raise_error:1 of
msgid "Reraises error if `success` is `False`, otherwise does nothing"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell:1 of
msgid "Bases: :class:`traitlets.config.configurable.SingletonConfigurable`"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell:1 of
msgid "An enhanced, interactive shell for Python."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.__init__:1 of
msgid "Create a configurable given a config config."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.__init__
#: IPython.core.interactiveshell.InteractiveShell.check_complete
#: IPython.core.interactiveshell.InteractiveShell.complete
#: IPython.core.interactiveshell.InteractiveShell.define_macro
#: IPython.core.interactiveshell.InteractiveShell.del_var
#: IPython.core.interactiveshell.InteractiveShell.drop_by_id
#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib
#: IPython.core.interactiveshell.InteractiveShell.enable_pylab
#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines
#: IPython.core.interactiveshell.InteractiveShell.find_user_code
#: IPython.core.interactiveshell.InteractiveShell.getoutput
#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module
#: IPython.core.interactiveshell.InteractiveShell.push
#: IPython.core.interactiveshell.InteractiveShell.register_magic_function
#: IPython.core.interactiveshell.InteractiveShell.reset_selective
#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes
#: IPython.core.interactiveshell.InteractiveShell.run_cell
#: IPython.core.interactiveshell.InteractiveShell.run_cell_async
#: IPython.core.interactiveshell.InteractiveShell.run_cell_magic
#: IPython.core.interactiveshell.InteractiveShell.run_code
#: IPython.core.interactiveshell.InteractiveShell.run_line_magic
#: IPython.core.interactiveshell.InteractiveShell.runcode
#: IPython.core.interactiveshell.InteractiveShell.safe_execfile
#: IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy
#: IPython.core.interactiveshell.InteractiveShell.safe_run_module
#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc
#: IPython.core.interactiveshell.InteractiveShell.should_run_async
#: IPython.core.interactiveshell.InteractiveShell.system
#: IPython.core.interactiveshell.InteractiveShell.system_piped
#: IPython.core.interactiveshell.InteractiveShell.system_raw
#: IPython.core.interactiveshell.InteractiveShell.transform_ast
#: IPython.core.interactiveshell.InteractiveShell.user_expressions of
msgid "Parameters"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.__init__:3 of
msgid ""
"If this is empty, default values are used. If config is a :class:`Config`"
" instance, it will be used to configure the instance."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.__init__:7 of
msgid "The parent Configurable instance of this object."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.__init__:11
#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines:13
#: IPython.core.interactiveshell.InteractiveShell.init_user_ns:7 of
msgid "Notes"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.__init__:12 of
msgid ""
"Subclasses of Configurable must call the :meth:`__init__` method of "
":class:`Configurable` *before* doing anything else and using "
":func:`super`::"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.__init__:21 of
msgid "This ensures that instances will be configured properly."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.all_ns_refs:1 of
msgid ""
"Get a list of references to all the namespace dictionaries in which "
"IPython might store a user-created object."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.all_ns_refs:4 of
msgid ""
"Note that this does not include the displayhook, which also caches "
"objects from the output."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.atexit_operations:1 of
msgid "This will be executed at the time of exit."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.atexit_operations:3 of
msgid ""
"Cleanup operations and saving of persistent data that is done "
"unconditionally by IPython should be performed here."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.atexit_operations:6 of
msgid ""
"For things that may depend on startup flags or platform specifics (such "
"as having readline or not), register a separate atexit function in the "
"code that has the appropriate information, rather than trying to clutter"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.auto_rewrite_input:1 of
msgid "Print to the screen the rewritten form of the user's command."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.auto_rewrite_input:3 of
msgid ""
"This shows visual feedback by rewriting input lines that cause automatic "
"calling to kick in, like::"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.auto_rewrite_input:8 of
msgid "into::"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.auto_rewrite_input:12 of
msgid ""
"after the user's input prompt.  This helps the user understand that the "
"input line was transformed automatically by IPython."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.call_pdb:1 of
msgid "Control auto-activation of pdb at exceptions"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.check_complete:1 of
msgid "Return whether a block of code is ready to execute, or should be continued"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.check_complete:3 of
msgid "Python input code, which can be multiline."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.check_complete
#: IPython.core.interactiveshell.InteractiveShell.complete
#: IPython.core.interactiveshell.InteractiveShell.find_user_code
#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module
#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes
#: IPython.core.interactiveshell.InteractiveShell.run_cell
#: IPython.core.interactiveshell.InteractiveShell.run_cell_async
#: IPython.core.interactiveshell.InteractiveShell.run_code
#: IPython.core.interactiveshell.InteractiveShell.runcode
#: IPython.core.interactiveshell.InteractiveShell.should_run_async
#: IPython.core.interactiveshell.InteractiveShell.transform_ast
#: IPython.core.interactiveshell.InteractiveShell.user_expressions of
msgid "Returns"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.check_complete:6 of
msgid ""
"* **status** (*str*) -- One of 'complete', 'incomplete', or 'invalid' if "
"source is not a   prefix of valid code. * **indent** (*str*) -- When "
"status is 'incomplete', this is some whitespace to insert on   the next "
"line of the prompt."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.check_complete:6 of
msgid ""
"**status** (*str*) -- One of 'complete', 'incomplete', or 'invalid' if "
"source is not a prefix of valid code."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.check_complete:8 of
msgid ""
"**indent** (*str*) -- When status is 'incomplete', this is some "
"whitespace to insert on the next line of the prompt."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:1 of
msgid "Clear the cache of main modules."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:3 of
#, python-format
msgid "Mainly for use by utilities like %reset."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:6 of
msgid "Examples"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:7 of
msgid "In [15]: import IPython"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:9 of
msgid "In [16]: m = _ip.new_main_mod(IPython.__file__, 'IPython')"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:11 of
msgid "In [17]: len(_ip._main_mod_cache) > 0 Out[17]: True"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:14 of
msgid "In [18]: _ip.clear_main_mod_cache()"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache:16 of
msgid "In [19]: len(_ip._main_mod_cache) == 0 Out[19]: True"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:1 of
msgid "Return the completed text and a list of completions."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:3 of
msgid ""
"A string of text to be completed on.  It can be given as empty and "
"instead a line/position pair are given.  In this case, the completer "
"itself will split the line like readline does."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:7 of
msgid "The complete line that text is part of."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:9 of
msgid "The position of the cursor on the input line."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:12 of
msgid ""
"* **text** (*string*) -- The actual text that was completed. * "
"**matches** (*list*) -- A sorted list with all possible completions."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:12 of
msgid "**text** (*string*) -- The actual text that was completed."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:13 of
msgid "**matches** (*list*) -- A sorted list with all possible completions."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:15 of
msgid ""
"The optional arguments allow the completion to take more context into "
"account, and are part of the low-level completion API."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:18 of
msgid ""
"This is a wrapper around the completion mechanism, similar to what "
"readline does at the command line when the TAB key is hit.  By exposing "
"it as a method, it can be used by other non-readline environments (such "
"as GUIs) for text completion."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:23 of
msgid "Simple usage example:"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:25 of
msgid "In [1]: x = 'hello'"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.complete:27 of
msgid ""
"In [2]: _ip.complete('x.l') Out[2]: ('x.l', ['x.ljust', 'x.lower', "
"'x.lstrip'])"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.debugger:1 of
msgid "Call the pdb debugger."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.debugger:3 of
msgid "Keywords:"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.debugger:5 of
msgid ""
"force(False): by default, this routine checks the instance call_pdb flag "
"and does not actually invoke the debugger if the flag is false. The "
"'force' option forces the debugger to activate even if the flag is false."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.define_macro:1 of
msgid "Define a new macro"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.define_macro:3 of
msgid "The name of the macro."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.define_macro:5 of
msgid ""
"The action to do upon invoking the macro.  If a string, a new Macro "
"object is created by passing the string to it."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.del_var:1 of
msgid ""
"Delete a variable from the various namespaces, so that, as far as "
"possible, we're not keeping any hidden references to it."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.del_var:4 of
msgid "The name of the variable to delete."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.del_var:6 of
msgid ""
"If True, delete variables with the given name in each namespace. If False"
" (default), find the variable in the user namespace, and delete "
"references to it."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.drop_by_id:1 of
msgid ""
"Remove a dict of variables from the user namespace, if they are the same "
"as the values in the dictionary."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.drop_by_id:4 of
msgid ""
"This is intended for use by extensions: variables that they've added can "
"be taken back out if they are unloaded, without removing any that the "
"user has overwritten."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.drop_by_id:8 of
msgid "A dictionary mapping object names (as strings) to the objects."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib:1 of
msgid "Enable interactive matplotlib and inline figure support."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib:3 of
msgid "This takes the following steps:"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib:5 of
msgid "select the appropriate eventloop and matplotlib backend"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib:6 of
msgid "set up matplotlib for interactive use with that backend"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib:7 of
msgid "configure formatters for inline figure display"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib:8 of
msgid "enable the selected gui eventloop"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_matplotlib:10
#: IPython.core.interactiveshell.InteractiveShell.enable_pylab:10 of
msgid ""
"If given, dictates the choice of matplotlib GUI backend to use (should be"
" one of IPython's supported backends, 'qt', 'osx', 'tk', 'gtk', 'wx' or "
"'inline'), otherwise we use the default chosen by matplotlib (as dictated"
" by the matplotlib build-time options plus the user's matplotlibrc "
"configuration file).  Note that not all backends make sense in all "
"contexts, for example a terminal ipython can't display figures inline."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_pylab:1 of
msgid "Activate pylab support at runtime."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_pylab:3 of
msgid ""
"This turns on support for matplotlib, preloads into the interactive "
"namespace all of numpy and pylab, and configures IPython to correctly "
"interact with the GUI event loop.  The GUI backend to be used can be "
"optionally selected with the optional ``gui`` argument."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_pylab:8 of
msgid ""
"This method only adds preloading the namespace to "
"InteractiveShell.enable_matplotlib."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_pylab:18 of
msgid ""
"Whether to do `from numpy import *` and `from pylab import *` in addition"
" to module imports."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.enable_pylab:21 of
msgid "This argument is ignored, no welcome message will be displayed."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.ev:1 of
msgid "Evaluate python expression expr in user namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.ev:3 of
msgid "Returns the result of evaluation"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.ex:1 of
msgid "Execute a normal python statement in user namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.excepthook:1 of
msgid "One more defense for GUI apps that call sys.excepthook."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.excepthook:3 of
msgid ""
"GUI frameworks like wxPython trap exceptions and call sys.excepthook "
"themselves.  I guess this is a feature that enables them to keep running "
"after exceptions that would otherwise kill their mainloop. This is a "
"bother for IPython which excepts to catch all of the program exceptions "
"with a try: except: statement."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.excepthook:10 of
msgid ""
"Normally, IPython sets sys.excepthook to a CrashHandler instance, so if "
"any app directly invokes sys.excepthook, it will look to the user like "
"IPython crashed.  In order to work around this, we can disable the "
"CrashHandler and replace it with this excepthook instead, which prints a "
"regular traceback using our InteractiveTB.  In this fashion, apps which "
"call sys.excepthook will generate a regular-looking exception from "
"IPython, and the CrashHandler will only be triggered by real IPython "
"crashes."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.excepthook:19 of
msgid ""
"This hook should be used sparingly, only in places which are not likely "
"to be true IPython errors."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines:1 of
msgid "Return as a string a set of input history slices."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines:3 of
msgid ""
"The set of slices is given as a string, like \"~5/6-~4/2 4:8 9\", since "
"this function is for use by magic functions which get their arguments as "
"strings. The number before the / is the session number: ~n goes n back "
"from the current session."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines:8 of
msgid ""
"By default, the processed input is used.  If this is true, the raw input "
"history is used instead."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines:14 of
msgid "Slices can be described with two notations:"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines:16 of
msgid "``N:M`` -> standard python form, means including items N...(M-1)."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.extract_input_lines:17 of
msgid "``N-M`` -> include items N..M (closed endpoint)."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_cell_magic:1 of
msgid "Find and return a cell magic by name."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_cell_magic:3
#: IPython.core.interactiveshell.InteractiveShell.find_line_magic:3
#: IPython.core.interactiveshell.InteractiveShell.find_magic:3 of
msgid "Returns None if the magic isn't found."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_line_magic:1 of
msgid "Find and return a line magic by name."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_magic:1 of
msgid "Find and return a magic of the given type by name."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:1 of
msgid "Get a code string from history, file, url, or a string or macro."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:3 of
msgid "This is mainly used by magic functions."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:5 of
#, python-format
msgid ""
"A string specifying code to retrieve. This will be tried respectively as:"
" ranges of input history (see %history for syntax), url, corresponding "
".py file, filename, or an expression evaluating to a string or Macro in "
"the user namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:10 of
msgid ""
"If true (default), retrieve raw history. Has no effect on the other "
"retrieval mechanisms."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:13 of
msgid ""
"Only try to fetch python code, do not try alternative methods to decode "
"file if unicode fails."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:17 of
msgid ""
"* *A string of code.* * *ValueError is raised if nothing is found, and "
"TypeError if it evaluates* * *to an object of another type. In each case,"
" .args[0] is a printable* * *message.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:17 of
msgid "*A string of code.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:18 of
msgid "*ValueError is raised if nothing is found, and TypeError if it evaluates*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:19 of
msgid "*to an object of another type. In each case, .args[0] is a printable*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.find_user_code:20 of
msgid "*message.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.get_exception_only:1 of
msgid ""
"Return as a string (ending with a newline) the exception that just "
"occurred, without any traceback."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.get_ipython:1 of
msgid "Return the currently running IPython instance."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.getoutput:1 of
msgid "Get output (possibly including stderr) from a subprocess."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.getoutput:3 of
msgid ""
"Command to execute (can not end in '&', as background processes are not "
"supported."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.getoutput:6 of
msgid ""
"If True, split the output into an IPython SList.  Otherwise, an IPython "
"LSString is returned.  These are objects similar to normal lists and "
"strings, with a few convenience attributes for easier manipulation of "
"line-based output.  You can use '?' on them for details."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.getoutput:12 of
msgid ""
"How many frames above the caller are the local variables which should be "
"expanded in the command string? The default (0) assumes that the "
"expansion variables are in the stack frame calling this function."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_completer:1 of
msgid "Initialize the completion machinery."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_completer:3 of
msgid ""
"This creates completion machinery that can be used by client code, either"
" interactively in-process (typically triggered by the readline library), "
"programmatically (such as in test suites) or out-of-process (typically "
"over the network by remote frontends)."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings:1
#: of
msgid "register default filter for deprecation warning."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings:3
#: of
msgid ""
"This will allow deprecation warning of function used interactively to "
"show warning to users, and still hide deprecation warning from libraries "
"import."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_environment:1 of
msgid "Any changes we need to make to the user's environment."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_history:1 of
msgid "Sets up the command history, and starts regular autosaves."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_logstart:1 of
msgid "Initialize logging in case it was requested at the command line."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_readline:1
#: IPython.core.interactiveshell.get_default_colors:1 of
msgid "DEPRECATED"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_readline:3 of
msgid "Moved to terminal subclass, here only to simplify the init logic."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_user_ns:1 of
msgid "Initialize all user-visible namespaces to their minimum defaults."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_user_ns:3 of
msgid ""
"Certain history lists are also initialized here, as they effectively act "
"as user namespaces."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_user_ns:8 of
msgid ""
"All data structures here are only filled in, they are NOT reset by this "
"method.  If they were not empty before, data will simply be added to "
"them."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_virtualenv:1 of
msgid ""
"Add a virtualenv to sys.path so the user can import modules from it. This"
" isn't perfect: it doesn't use the Python interpreter with which the "
"virtualenv was built, and it ignores the --no-site-packages option. A "
"warning will appear suggesting the user installs IPython in the "
"virtualenv, but for many cases, it probably works well enough."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_virtualenv:7 of
msgid "Adapted from code snippets online."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.init_virtualenv:9 of
msgid "http://blog.ufsoft.org/2009/1/29/ipython-and-virtualenv"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.input_splitter:1 of
msgid ""
"Make this available for backward compatibility (pre-7.0 release) with "
"existing code."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.input_splitter:3 of
msgid ""
"For example, ipykernel ipykernel currently uses "
"`shell.input_splitter.check_complete`"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.magic:1 of
msgid "DEPRECATED. Use run_line_magic() instead."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.magic:3 of
msgid "Call a magic function by name."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.magic:5 of
msgid ""
"Input: a string containing the name of the magic function to call and any"
" additional arguments to be passed to the magic."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.magic:8 of
msgid "magic('name -opt foo bar') is equivalent to typing at the ipython prompt:"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.magic:11 of
msgid "In[1]: %name -opt foo bar"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.magic:13 of
msgid "To call a magic without arguments, simply use magic('name')."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.magic:15 of
msgid ""
"This provides a proper Python function to call IPython's magics in any "
"valid Python code you can type at the interpreter, including loops and "
"compound statements."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.mktempfile:1 of
msgid "Make a new tempfile and return its filename."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.mktempfile:3 of
msgid ""
"This makes a call to tempfile.mkstemp (created in a tempfile.mkdtemp), "
"but it registers the created filename internally so ipython cleans it up "
"at exit time."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.mktempfile:7 of
msgid "Optional inputs:"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.mktempfile:9 of
msgid ""
"data(None): if data is given, it gets written out to the temp file "
"immediately, and the file is closed again."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.new_main_mod:1 of
msgid "Return a new 'main' module object for user code execution."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.new_main_mod:3 of
msgid ""
"``filename`` should be the path of the script which will be run in the "
"module. Requests with the same filename will get the same module, with "
"its namespace cleared."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.new_main_mod:7 of
msgid ""
"``modname`` should be the module name - normally either '__main__' or the"
" basename of the file without the extension."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.new_main_mod:10 of
#, python-format
msgid ""
"When scripts are executed via %run, we must keep a reference to their "
"__main__ module around so that Python doesn't clear it, rendering "
"references to module globals useless."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.new_main_mod:14 of
msgid ""
"This method keeps said reference in a private dict, keyed by the absolute"
" path of the script. This way, for multiple executions of the same script"
" we only keep one copy of the namespace (the last one), thus preventing "
"memory leaks from old references while allowing the objects from the last"
" execution to be accessible."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.object_inspect:1 of
msgid "Get object info about oname"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.object_inspect_mime:1 of
msgid "Get object info as a mimebundle of formatted representations."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.object_inspect_mime:3 of
msgid ""
"A mimebundle is a dictionary, keyed by mime-type. It must always have the"
" key `'text/plain'`."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.object_inspect_text:1 of
msgid "Get object info as formatted text"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module:1 of
msgid "Prepare the module and namespace in which user code will be run."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module:3 of
msgid ""
"When IPython is started normally, both parameters are None: a new module "
"is created automatically, and its __dict__ used as the namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module:6 of
msgid ""
"If only user_module is provided, its __dict__ is used as the namespace. "
"If only user_ns is provided, a dummy module is created, and user_ns "
"becomes the global namespace. If both are provided (as they may be when "
"embedding), user_ns is the local namespace, and user_module provides the "
"global namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module:12 of
msgid ""
"The current user module in which IPython is being run. If None, a clean "
"module will be created."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module:15 of
msgid "A namespace in which to run interactive commands."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.prepare_user_module
#: IPython.core.interactiveshell.InteractiveShell.run_cell of
msgid "Return type"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.push:1 of
msgid "Inject a group of variables into the IPython user namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.push:3 of
msgid ""
"The variables to inject into the user's namespace.  If a dict, a simple "
"update is done.  If a str, the string is assumed to have variable names "
"separated by spaces.  A list/tuple of str can also be used to give the "
"variable names.  If just the variable names are give (list/tuple/str) "
"then the variable values looked up in the callers frame."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.push:10 of
msgid "If True (default), the variables will be listed with the ``who`` magic."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:1 of
msgid "Expose a standalone function as magic function for IPython."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:3 of
msgid ""
"This will create an IPython magic (line, cell or both) from a standalone "
"function.  The functions should have the following signatures:"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:7 of
msgid "For line magics: `def f(line)`"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:8 of
msgid "For cell magics: `def f(line, cell)`"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:9 of
msgid "For a function that does both: `def f(line, cell=None)`"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:11 of
#, python-format
msgid ""
"In the latter case, the function will be called with `cell==None` when "
"invoked as `%f`, and with cell as a string when invoked as `%%f`."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:14 of
msgid "Function to be registered as a magic."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:16 of
msgid "Kind of magic, one of 'line', 'cell' or 'line_cell'"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_magic_function:18 of
msgid ""
"If given, the name the magic will have in the IPython namespace.  By "
"default, the name of the function itself is used."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_post_execute:1 of
msgid "DEPRECATED: Use ip.events.register('post_run_cell', func)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.register_post_execute:3 of
msgid "Register a function for calling after code execution."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.reset:1 of
msgid ""
"Clear all internal namespaces, and attempt to release references to user "
"objects."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.reset:4 of
msgid "If new_session is True, a new history session will be opened."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.reset_selective:1 of
msgid ""
"Clear selective variables from internal namespaces based on a specified "
"regular expression."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.reset_selective:4 of
msgid ""
"A regular expression pattern that will be used in searching variable "
"names in the users namespaces."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.restore_sys_module_state:1 of
msgid "Restore the state of the sys module."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:1 of
msgid ""
"Run a sequence of AST nodes. The execution mode depends on the "
"interactivity parameter."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:4 of
msgid "A sequence of AST nodes to run."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:6 of
msgid ""
"Will be passed to the compiler as the filename of the cell. Typically the"
" value returned by ip.compile.cache(cell)."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:9 of
msgid ""
"'all', 'last', 'last_expr' , 'last_expr_or_assign' or 'none', specifying "
"which nodes should be run interactively (displaying output from "
"expressions). 'last_expr' will run the last node interactively only if it"
" is an expression (i.e. expressions in loops or other blocks are not "
"displayed) 'last_expr_or_assign' will run the last expression or the last"
" assignment. Other values for this parameter will raise a ValueError.  "
"Experimental value: 'async' Will try to run top level interactive "
"async/await code in default runner, this will not respect the "
"interactivty setting and will only run the last node if it is an "
"expression."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:9 of
msgid ""
"'all', 'last', 'last_expr' , 'last_expr_or_assign' or 'none', specifying "
"which nodes should be run interactively (displaying output from "
"expressions). 'last_expr' will run the last node interactively only if it"
" is an expression (i.e. expressions in loops or other blocks are not "
"displayed) 'last_expr_or_assign' will run the last expression or the last"
" assignment. Other values for this parameter will raise a ValueError."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:17 of
msgid ""
"Experimental value: 'async' Will try to run top level interactive "
"async/await code in default runner, this will not respect the "
"interactivty setting and will only run the last node if it is an "
"expression."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:22 of
msgid ""
"A function with the same interface as the built-in compile(), to turn the"
" AST nodes into code objects. Default is the built-in compile()."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:25
#: IPython.core.interactiveshell.InteractiveShell.run_code:8
#: IPython.core.interactiveshell.InteractiveShell.runcode:8 of
msgid "An object to store exceptions that occur during execution."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:28 of
msgid ""
"* *True if an exception occurred while running code, False if it "
"finished* * *running.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:28 of
msgid "*True if an exception occurred while running code, False if it finished*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_ast_nodes:29 of
msgid "*running.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell:1 of
msgid "Run a complete IPython cell."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell:3
#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:3 of
msgid "The code (including IPython code such as %magic functions) to run."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell:5
#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:5 of
msgid ""
"If True, the raw and translated cell will be stored in IPython's history."
" For user code calling back into IPython's machinery, this should be set "
"to False."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell:9
#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:9 of
msgid ""
"If True, avoid side-effects, such as implicit displayhooks and and "
"logging.  silent=True forces store_history=False."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell:12
#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:12
#: IPython.core.interactiveshell.InteractiveShell.safe_execfile:17
#: IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy:6 of
msgid ""
"If True, the code will share future statements with the interactive "
"shell. It will both be affected by previous __future__ imports, and any "
"__future__ imports in the code will affect the shell. If False, "
"__future__ imports are not shared in either direction."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell:18 of
msgid "**result**"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell:19 of
msgid ":class:`ExecutionResult`"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:1 of
msgid "Run a complete IPython cell asynchronously."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:18 of
msgid "* **result** (:class:`ExecutionResult`) * **.. versionadded** (*7.0*)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:18 of
msgid "**result** (:class:`ExecutionResult`)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_async:19
#: IPython.core.interactiveshell.InteractiveShell.should_run_async:7 of
msgid "**.. versionadded** (*7.0*)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_magic:1 of
msgid "Execute the given cell magic."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_magic:3
#: IPython.core.interactiveshell.InteractiveShell.run_line_magic:3 of
msgid "Name of the desired magic function, without '%' prefix."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_magic:5 of
msgid "The rest of the first input line as a single string."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_cell_magic:7 of
msgid "The body of the cell as a (possibly multiline) string."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_code:1
#: IPython.core.interactiveshell.InteractiveShell.runcode:1 of
msgid "Execute a code object."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_code:3
#: IPython.core.interactiveshell.InteractiveShell.runcode:3 of
msgid ""
"When an exception occurs, self.showtraceback() is called to display a "
"traceback."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_code:6
#: IPython.core.interactiveshell.InteractiveShell.runcode:6 of
msgid "A compiled code object, to be executed"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_code:10
#: IPython.core.interactiveshell.InteractiveShell.runcode:10 of
msgid "Attempt to run top-level asynchronous code in a default loop."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_code:13
#: IPython.core.interactiveshell.InteractiveShell.runcode:13 of
msgid "* **False** (*successful execution.*) * **True** (*an error occurred.*)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_code:13
#: IPython.core.interactiveshell.InteractiveShell.runcode:13 of
msgid "**False** (*successful execution.*)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_code:14
#: IPython.core.interactiveshell.InteractiveShell.runcode:14 of
msgid "**True** (*an error occurred.*)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_line_magic:1 of
msgid "Execute the given line magic."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_line_magic:5 of
msgid "The rest of the input line as a single string."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.run_line_magic:7 of
msgid ""
"If run_line_magic() is called from magic() then _stack_depth=2. This is "
"added to ensure backward compatibility for use of 'get_ipython().magic()'"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile:1 of
msgid "A safe version of the builtin execfile()."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile:3 of
msgid ""
"This version will never throw an exception, but instead print helpful "
"error messages to the screen.  This only works on pure Python files with "
"the .py extension."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile:7 of
msgid "The name of the file to be executed."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile:9 of
msgid ""
"One or two namespaces, passed to execfile() as (globals,locals). If only "
"one is given, it is passed as both."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile:12 of
msgid ""
"If True, then silence SystemExit for non-zero status (it is always "
"silenced for zero status, as it is so common)."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile:15 of
msgid "If True raise exceptions everywhere. Meant for testing."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy:1 of
msgid "Like safe_execfile, but for .ipy or .ipynb files with IPython syntax."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy:3 of
msgid ""
"The name of the file to execute.  The filename must have a .ipy or .ipynb"
" extension."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy:11 of
msgid "If True raise exceptions everywhere.  Meant for testing."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_run_module:1 of
msgid "A safe version of runpy.run_module()."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_run_module:3 of
msgid ""
"This version will never throw an exception, but instead print helpful "
"error messages to the screen."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_run_module:6 of
msgid "`SystemExit` exceptions with status code 0 or None are ignored."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_run_module:8 of
msgid "The name of the module to be executed."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.safe_run_module:10 of
msgid "The globals namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.save_sys_module_state:1 of
msgid "Save the state of hooks in the sys module."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.save_sys_module_state:3 of
msgid "This has to be called after self.user_module is created."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_autoindent:1 of
msgid "Set the autoindent flag."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_autoindent:3 of
msgid "If called with no arguments, it acts as a toggle."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_completer_frame:1 of
msgid "Set the frame of the completer."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_completer:1 of
msgid "Adds a new custom completer function."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_completer:3 of
msgid ""
"The position argument (defaults to 0) is the index in the completers list"
" where you want the completer to be inserted."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:1 of
msgid ""
"Set a custom exception handler, which will be called if any of the "
"exceptions in exc_tuple occur in the mainloop (specifically, in the "
"run_code() method)."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:5 of
msgid ""
"A *tuple* of exception classes, for which to call the defined handler.  "
"It is very important that you use a tuple, and NOT A LIST here, because "
"of the way Python's except statement works.  If you only want to trap a "
"single exception, use a singleton tuple::      exc_tuple == "
"(MyCustomException,)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:5 of
msgid ""
"A *tuple* of exception classes, for which to call the defined handler.  "
"It is very important that you use a tuple, and NOT A LIST here, because "
"of the way Python's except statement works.  If you only want to trap a "
"single exception, use a singleton tuple::"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:12 of
msgid ""
"handler must have the following signature::      def my_handler(self, "
"etype, value, tb, tb_offset=None):         ...         return "
"structured_traceback  Your handler must return a structured traceback (a "
"list of strings), or None.  This will be made into an instance method "
"(via types.MethodType) of IPython itself, and it will be called if any of"
" the exceptions listed in the exc_tuple are caught. If the handler is "
"None, an internal basic one is used, which just prints basic info.  To "
"protect IPython from crashes, if your handler ever raises an exception or"
" returns an invalid result, it will be immediately disabled."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:13 of
msgid "handler must have the following signature::"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:19 of
msgid ""
"Your handler must return a structured traceback (a list of strings), or "
"None."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:22 of
msgid ""
"This will be made into an instance method (via types.MethodType) of "
"IPython itself, and it will be called if any of the exceptions listed in "
"the exc_tuple are caught. If the handler is None, an internal basic one "
"is used, which just prints basic info."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_custom_exc:27 of
msgid ""
"To protect IPython from crashes, if your handler ever raises an exception"
" or returns an invalid result, it will be immediately disabled."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_hook:1 of
msgid ""
"IPython exposes some of its internal API as user-modifiable hooks.  By "
"adding your function to one of these hooks, you can modify IPython's "
"behavior to call at runtime your own routines."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_next_input:1 of
msgid "Sets the 'default' input string for the next command line."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.set_next_input:3 of
msgid "Example::"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.should_run_async:1 of
msgid "Return whether a cell should be run asynchronously via a coroutine runner"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.should_run_async:3 of
msgid "The code to be executed"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.should_run_async:6 of
msgid ""
"* **result** (*bool*) -- Whether the code needs to be run with a "
"coroutine runner or not * **.. versionadded** (*7.0*)"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.should_run_async:6 of
msgid ""
"**result** (*bool*) -- Whether the code needs to be run with a coroutine "
"runner or not"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.show_usage:1 of
msgid "Show a usage message"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.show_usage_error:1 of
msgid "Show a short message for UsageErrors"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.show_usage_error:3 of
msgid "These are special exceptions that shouldn't show a traceback."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showindentationerror:1 of
msgid ""
"Called by _run_cell when there's an IndentationError in code entered at "
"the prompt."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showindentationerror:4 of
msgid ""
"This is overridden in TerminalInteractiveShell to show a message about "
"the %paste magic."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showsyntaxerror:1 of
msgid "Display the syntax error that just occurred."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showsyntaxerror:3 of
msgid "This doesn't display a stack trace because there isn't one."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showsyntaxerror:5 of
msgid ""
"If a filename is given, it is stuffed in the exception instead of what "
"was there before (because Python's parser always uses \"<string>\" when "
"reading from a string)."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showsyntaxerror:9 of
msgid ""
"If the syntax error occurred when running a compiled code (i.e. "
"running_compile_code=True), longer stack trace will be displayed."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showtraceback:1 of
msgid "Display the exception that just occurred."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showtraceback:3 of
msgid ""
"If nothing is known about the exception, this is the method which should "
"be used throughout the code for presenting user tracebacks, rather than "
"directly invoking the InteractiveTB object."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.showtraceback:7 of
msgid ""
"A specific showsyntaxerror() also exists, but this method can take care "
"of calling it if needed, so unless you are explicitly catching a "
"SyntaxError exception, don't try to analyze the stack manually and simply"
" call this method."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.system:1
#: IPython.core.interactiveshell.InteractiveShell.system_piped:1 of
msgid "Call the given cmd in a subprocess, piping stdout/err"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.system:3
#: IPython.core.interactiveshell.InteractiveShell.system_piped:3 of
msgid ""
"Command to execute (can not end in '&', as background processes are not "
"supported.  Should not be a command that expects input other than simple "
"text."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.system_raw:1 of
msgid ""
"Call the given cmd in a subprocess using os.system on Windows or "
"subprocess.call using the system shell on other platforms."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.system_raw:4 of
msgid "Command to execute."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_ast:1 of
msgid "Apply the AST transformations from self.ast_transformers"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_ast:3 of
msgid ""
"The root node to be transformed. Typically called with the ast.Module "
"produced by parsing user input."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_ast:7 of
msgid ""
"* *An ast.Node corresponding to the node it was called with. Note that "
"it* * *may also modify the passed object, so don't rely on references to "
"the* * *original AST.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_ast:7 of
msgid "*An ast.Node corresponding to the node it was called with. Note that it*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_ast:8 of
msgid "*may also modify the passed object, so don't rely on references to the*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_ast:9 of
msgid "*original AST.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_cell:1 of
msgid "Transform an input cell before parsing it."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_cell:3 of
msgid ""
"Static transformations, implemented in IPython.core.inputtransformer2, "
"deal with things like ``%magic`` and ``!system`` commands. These run on "
"all input. Dynamic transformations, for things like unescaped magics and "
"the exit autocall, depend on the state of the interpreter. These only "
"apply to single line inputs."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.transform_cell:10 of
msgid ""
"These string-based transformations are followed by AST transformations; "
"see :meth:`transform_ast`."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.user_expressions:1 of
msgid "Evaluate a dict of expressions in the user's namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.user_expressions:3 of
msgid ""
"A dict with string keys and string values.  The expression values should "
"be valid Python expressions, each of which will be evaluated in the user "
"namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.user_expressions:8 of
msgid ""
"* *A dict, keyed like the input expressions dict, with the rich mime-"
"typed* * *display_data of each value.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.user_expressions:8 of
msgid "*A dict, keyed like the input expressions dict, with the rich mime-typed*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.user_expressions:9 of
msgid "*display_data of each value.*"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.var_expand:1 of
msgid "Expand python variables in a string."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.var_expand:3 of
msgid ""
"The depth argument indicates how many frames above the caller should be "
"walked to look for the local namespace where to expand variables."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.var_expand:6 of
msgid ""
"The global namespace for expansion is always the user's interactive "
"namespace."
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.write:1 of
msgid "DEPRECATED: Write a string to the default output"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShell.write_err:1 of
msgid "DEPRECATED: Write a string to the default error output"
msgstr ""

#: IPython.core.interactiveshell.InteractiveShellABC:1 of
msgid "An abstract base class for InteractiveShell."
msgstr ""

#: ../../source/api/generated/IPython.core.interactiveshell.rst:39
msgid "2 Functions"
msgstr ""

