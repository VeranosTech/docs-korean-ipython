# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.core.events.rst:4
msgid "Module: :mod:`core.events`"
msgstr ""

#: IPython.core.events:1 of
msgid "Infrastructure for registering and firing callbacks on application events."
msgstr ""

#: IPython.core.events:3 of
msgid ""
"Unlike :mod:`IPython.core.hooks`, which lets end users set single "
"functions to be called at specific times, or a collection of alternative "
"methods to try, callbacks are designed to be used by extension authors. A"
" number of callbacks can be registered for the same event without needing"
" to be aware of one another."
msgstr ""

#: IPython.core.events:8 of
msgid ""
"The functions defined in this module are no-ops indicating the names of "
"available events and the arguments which will be passed to them."
msgstr ""

#: IPython.core.events:13 IPython.core.events.EventManager:8 of
msgid ""
"This API is experimental in IPython 2.0, and may be revised in future "
"versions."
msgstr ""

#: ../../source/api/generated/IPython.core.events.rst:10
msgid "1 Class"
msgstr ""

#: IPython.core.events.EventManager:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: IPython.core.events.EventManager:1 of
msgid "Manage a collection of events and a sequence of callbacks for each."
msgstr ""

#: IPython.core.events.EventManager:3 of
msgid ""
"This is attached to "
":class:`~IPython.core.interactiveshell.InteractiveShell` instances as an "
"``events`` attribute."
msgstr ""

#: IPython.core.events.EventManager.__init__:1 of
msgid "Initialise the :class:`CallbackManager`."
msgstr ""

#: IPython.core.events.EventManager.__init__
#: IPython.core.events.EventManager.register IPython.core.events.post_run_cell
#: IPython.core.events.pre_run_cell IPython.core.events.shell_initialized of
msgid "Parameters"
msgstr ""

#: IPython.core.events.EventManager.__init__:3 of
msgid "The :class:`~IPython.core.interactiveshell.InteractiveShell` instance"
msgstr ""

#: IPython.core.events.EventManager.__init__:4 of
msgid "An iterable of names for callback events."
msgstr ""

#: IPython.core.events.EventManager.register:1 of
msgid "Register a new event callback."
msgstr ""

#: IPython.core.events.EventManager.register:3 of
msgid "The event for which to register this callback."
msgstr ""

#: IPython.core.events.EventManager.register:5 of
msgid ""
"A function to be called on the given event. It should take the same "
"parameters as the appropriate callback prototype."
msgstr ""

#: IPython.core.events.EventManager.register of
msgid "raises"
msgstr ""

#: IPython.core.events.EventManager.register:9 of
msgid ":exc:`TypeError` -- If ``function`` is not callable."
msgstr ""

#: IPython.core.events.EventManager.register:10 of
msgid ":exc:`KeyError` -- If ``event`` is not one of the known events."
msgstr ""

#: IPython.core.events.EventManager.trigger:1 of
msgid "Call callbacks for ``event``."
msgstr ""

#: IPython.core.events.EventManager.trigger:3 of
msgid ""
"Any additional arguments are passed to all callbacks registered for this "
"event. Exceptions raised by callbacks are caught, and a message printed."
msgstr ""

#: IPython.core.events.EventManager.unregister:1 of
msgid "Remove a callback from the given event."
msgstr ""

#: ../../source/api/generated/IPython.core.events.rst:19
msgid "5 Functions"
msgstr ""

#: IPython.core.events.pre_execute:1 of
msgid "Fires before code is executed in response to user/frontend action."
msgstr ""

#: IPython.core.events.post_execute:3 IPython.core.events.pre_execute:3 of
msgid ""
"This includes comm and widget messages and silent execution, as well as "
"user code cells."
msgstr ""

#: IPython.core.events.pre_run_cell:1 of
msgid "Fires before user-entered code runs."
msgstr ""

#: IPython.core.events.pre_run_cell:3 of
msgid "An object containing information used for the code execution."
msgstr ""

#: IPython.core.events.post_execute:1 of
msgid "Fires after code is executed in response to user/frontend action."
msgstr ""

#: IPython.core.events.post_run_cell:1 of
msgid "Fires after user-entered code runs."
msgstr ""

#: IPython.core.events.post_run_cell:3 of
msgid "The object which will be returned as the execution result."
msgstr ""

#: IPython.core.events.shell_initialized:1 of
msgid ""
"Fires after initialisation of "
":class:`~IPython.core.interactiveshell.InteractiveShell`."
msgstr ""

#: IPython.core.events.shell_initialized:3 of
msgid ""
"This is before extensions and startup scripts are loaded, so it can only "
"be set by subclassing."
msgstr ""

#: IPython.core.events.shell_initialized:6 of
msgid "The newly initialised shell."
msgstr ""

