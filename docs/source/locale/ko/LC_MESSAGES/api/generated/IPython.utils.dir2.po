# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/api/generated/IPython.utils.dir2.rst:4
msgid "Module: :mod:`utils.dir2`"
msgstr ""

#: IPython.utils.dir2:1 of
msgid "A fancy version of Python's builtin :func:`dir` function."
msgstr ""

#: ../../source/api/generated/IPython.utils.dir2.rst:10
msgid "3 Functions"
msgstr ""

#: IPython.utils.dir2.safe_hasattr:1 of
msgid ""
"In recent versions of Python, hasattr() only catches AttributeError. This"
" catches all errors."
msgstr ""

#: IPython.utils.dir2.dir2:1 of
msgid ""
"Extended version of the Python builtin dir(), which does a few extra "
"checks."
msgstr ""

#: IPython.utils.dir2.dir2:4 of
msgid ""
"This version is guaranteed to return only a list of true strings, whereas"
" dir() returns anything that objects inject into themselves, even if they"
" are later not really valid for attribute access (many extension "
"libraries have such bugs)."
msgstr ""

#: IPython.utils.dir2.get_real_method:1 of
msgid "Like getattr, but with a few extra sanity checks:"
msgstr ""

#: IPython.utils.dir2.get_real_method:3 of
msgid "If obj is a class, ignore everything except class methods"
msgstr ""

#: IPython.utils.dir2.get_real_method:4 of
msgid "Check if obj is a proxy that claims to have all attributes"
msgstr ""

#: IPython.utils.dir2.get_real_method:5 of
msgid "Catch attribute access failing with any exception"
msgstr ""

#: IPython.utils.dir2.get_real_method:6 of
msgid "Check that the attribute is a callable object"
msgstr ""

#: IPython.utils.dir2.get_real_method:8 of
msgid "Returns the method or None."
msgstr ""

