# SOME DESCRIPTIVE TITLE.
# Copyright (C) The IPython Development Team
# This file is distributed under the same license as the IPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IPython 7.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../<rst_prolog>:4
msgid ""
"This documentation covers a development version of IPython. The "
"development version may differ significantly from the latest stable "
"release."
msgstr ""

#: ../../<rst_prolog>:9
msgid ""
"This documentation covers IPython versions 6.0 and higher. Beginning with"
" version 6.0, IPython stopped supporting compatibility with Python "
"versions lower than 3.3 including all versions of Python 2.7."
msgstr ""

#: ../../<rst_prolog>:13
msgid ""
"If you are looking for an IPython version compatible with Python 2.7, "
"please use the IPython 5.x LTS release and refer to its documentation "
"(LTS is the long term support release)."
msgstr ""

#: ../../source/development/config.rst:5
msgid "Overview of the IPython configuration system"
msgstr ""

#: ../../source/development/config.rst:7
msgid ""
"This section describes the IPython configuration system. This is based on"
" :mod:`traitlets.config`; see that documentation for more information "
"about the overall architecture."
msgstr ""

#: ../../source/development/config.rst:12
msgid "Configuration file location"
msgstr ""

#: ../../source/development/config.rst:14
msgid ""
"So where should you put your configuration files? IPython uses "
"\"profiles\" for configuration, and by default, all profiles will be "
"stored in the so called \"IPython directory\". The location of this "
"directory is determined by the following algorithm:"
msgstr ""

#: ../../source/development/config.rst:19
msgid "If the ``ipython-dir`` command line flag is given, its value is used."
msgstr ""

#: ../../source/development/config.rst:21
msgid ""
"If not, the value returned by :func:`IPython.paths.get_ipython_dir` is "
"used. This function will first look at the :envvar:`IPYTHONDIR` "
"environment variable and then default to :file:`~/.ipython`. Historical "
"support for the :envvar:`IPYTHON_DIR` environment variable will be "
"removed in a future release."
msgstr ""

#: ../../source/development/config.rst:27
msgid "For most users, the configuration directory will be :file:`~/.ipython`."
msgstr ""

#: ../../source/development/config.rst:29
msgid ""
"Previous versions of IPython on Linux would use the XDG config directory,"
" creating :file:`~/.config/ipython` by default. We have decided to go "
"back to :file:`~/.ipython` for consistency among systems. IPython will "
"issue a warning if it finds the XDG location, and will move it to the new"
" location if there isn't already a directory there."
msgstr ""

#: ../../source/development/config.rst:35
msgid ""
"Once the location of the IPython directory has been determined, you need "
"to know which profile you are using. For users with a single "
"configuration, this will simply be 'default', and will be located in "
":file:`<IPYTHONDIR>/profile_default`."
msgstr ""

#: ../../source/development/config.rst:40
msgid ""
"The next thing you need to know is what to call your configuration file. "
"The basic idea is that each application has its own default configuration"
" filename. The default named used by the :command:`ipython` command line "
"program is :file:`ipython_config.py`, and *all* IPython applications will"
" use this file. The IPython kernel will load its own config file *after* "
":file:`ipython_config.py`. To load a particular configuration file "
"instead of the default, the name can be overridden by the ``config_file``"
" command line flag."
msgstr ""

#: ../../source/development/config.rst:49
msgid "To generate the default configuration files, do::"
msgstr ""

#: ../../source/development/config.rst:53
msgid ""
"and you will have a default :file:`ipython_config.py` in your IPython "
"directory under :file:`profile_default`."
msgstr ""

#: ../../source/development/config.rst:58
msgid ""
"IPython configuration options are case sensitive, and IPython cannot "
"catch misnamed keys or invalid values."
msgstr ""

#: ../../source/development/config.rst:61
msgid "By default IPython will also ignore any invalid configuration files."
msgstr ""

#: ../../source/development/config.rst:65
msgid ""
"IPython can be configured to abort in case of invalid configuration file."
" To do so set the environment variable ``IPYTHON_SUPPRESS_CONFIG_ERRORS``"
" to `'1'` or `'true'`"
msgstr ""

#: ../../source/development/config.rst:71
msgid "Locating these files"
msgstr ""

#: ../../source/development/config.rst:73
msgid ""
"From the command-line, you can quickly locate the IPYTHONDIR or a "
"specific profile with:"
msgstr ""

#: ../../source/development/config.rst:84
msgid ""
"These map to the utility functions: "
":func:`IPython.utils.path.get_ipython_dir` and "
":func:`IPython.utils.path.locate_profile` respectively."
msgstr ""

#: ../../source/development/config.rst:91
msgid "Profiles"
msgstr ""

#: ../../source/development/config.rst:93
msgid ""
"A profile is a directory containing configuration and runtime files, such"
" as logs, connection info for the parallel apps, and your IPython command"
" history."
msgstr ""

#: ../../source/development/config.rst:96
msgid ""
"The idea is that users often want to maintain a set of configuration "
"files for different purposes: one for doing numerical computing with "
"NumPy and SciPy and another for doing symbolic computing with SymPy. "
"Profiles make it easy to keep a separate configuration files, logs, and "
"histories for each of these purposes."
msgstr ""

#: ../../source/development/config.rst:101
msgid "Let's start by showing how a profile is used:"
msgstr ""

#: ../../source/development/config.rst:107
msgid ""
"This tells the :command:`ipython` command line program to get its "
"configuration from the \"sympy\" profile. The file names for various "
"profiles do not change. The only difference is that profiles are named in"
" a special way. In the case above, the \"sympy\" profile means looking "
"for :file:`ipython_config.py` in :file:`<IPYTHONDIR>/profile_sympy`."
msgstr ""

#: ../../source/development/config.rst:112
msgid "The general pattern is this: simply create a new profile with:"
msgstr ""

#: ../../source/development/config.rst:118
msgid ""
"which adds a directory called ``profile_<name>`` to your IPython "
"directory. Then you can load this profile by adding ``--profile=<name>`` "
"to your command line options. Profiles are supported by all IPython "
"applications."
msgstr ""

#: ../../source/development/config.rst:122
msgid ""
"IPython ships with some sample profiles in "
":file:`IPython/config/profile`. If you create profiles with the name of "
"one of our shipped profiles, these config files will be copied over "
"instead of starting with the automatically generated config files."
msgstr ""

#: ../../source/development/config.rst:127
msgid ""
"IPython extends the config loader for Python files so that you can "
"inherit config from another profile. To do this, use a line like this in "
"your Python config file:"
msgstr ""

